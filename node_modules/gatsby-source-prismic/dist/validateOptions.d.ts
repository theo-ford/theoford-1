import * as struct from 'superstruct';
import { PluginOptions, BrowserPluginOptions } from './types';
declare const PluginOptions: struct.Struct<{
    repositoryName: string;
    schemas: Record<string, Record<string, unknown>>;
    linkResolver: Function;
    htmlSerializer: Function;
    fetchLinks: string[];
    lang: string;
    typePathsFilenamePrefix: string;
    prismicToolbar: boolean | "legacy";
    imageImgixParams: Record<string, string | number | boolean | undefined>;
    imagePlaceholderImgixParams: Record<string, string | number | boolean | undefined>;
    plugins: unknown[];
    accessToken?: string | undefined;
    shouldDownloadImage?: Function | undefined;
    webhookSecret?: string | undefined;
    releaseID?: string | undefined;
}, {
    shouldDownloadImage: struct.Struct<Function | undefined, any>;
    webhookSecret: struct.Struct<string | undefined, any>;
    repositoryName: struct.Struct<string, any>;
    accessToken: struct.Struct<string | undefined, any>;
    releaseID: struct.Struct<string | undefined, any>;
    schemas: struct.Struct<Record<string, Record<string, unknown>>, any>;
    linkResolver: struct.Struct<Function, any>;
    htmlSerializer: struct.Struct<Function, any>;
    fetchLinks: struct.Struct<string[], any>;
    lang: struct.Struct<string, any>;
    typePathsFilenamePrefix: struct.Struct<string, any>;
    prismicToolbar: struct.Struct<boolean | "legacy", any>;
    imageImgixParams: struct.Struct<Record<string, string | number | boolean | undefined>, any>;
    imagePlaceholderImgixParams: struct.Struct<Record<string, string | number | boolean | undefined>, any>;
    plugins: struct.Struct<unknown[], any>;
}>;
declare const BrowserPluginOptions: struct.Struct<{
    repositoryName: string;
    schemas: Record<string, Record<string, unknown>>;
    linkResolver: Function;
    htmlSerializer: Function;
    fetchLinks: string[];
    lang: string;
    typePathsFilenamePrefix: string;
    prismicToolbar: boolean | "legacy";
    imageImgixParams: Record<string, string | number | boolean | undefined>;
    imagePlaceholderImgixParams: Record<string, string | number | boolean | undefined>;
    plugins: unknown[];
    schemasDigest: string;
    accessToken?: string | undefined;
    releaseID?: string | undefined;
    pathResolver?: Function | undefined;
}, {
    pathResolver: struct.Struct<Function | undefined, any>;
    schemasDigest: struct.Struct<string, any>;
    repositoryName: struct.Struct<string, any>;
    accessToken: struct.Struct<string | undefined, any>;
    releaseID: struct.Struct<string | undefined, any>;
    schemas: struct.Struct<Record<string, Record<string, unknown>>, any>;
    linkResolver: struct.Struct<Function, any>;
    htmlSerializer: struct.Struct<Function, any>;
    fetchLinks: struct.Struct<string[], any>;
    lang: struct.Struct<string, any>;
    typePathsFilenamePrefix: struct.Struct<string, any>;
    prismicToolbar: struct.Struct<boolean | "legacy", any>;
    imageImgixParams: struct.Struct<Record<string, string | number | boolean | undefined>, any>;
    imagePlaceholderImgixParams: struct.Struct<Record<string, string | number | boolean | undefined>, any>;
    plugins: struct.Struct<unknown[], any>;
}>;
export declare const validatePluginOptions: (pluginOptions: PluginOptions) => PluginOptions;
export declare const validateBrowserOptions: (browserOptions: BrowserPluginOptions) => BrowserPluginOptions;
export {};
