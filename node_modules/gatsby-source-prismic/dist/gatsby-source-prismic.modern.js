import{useReducer as e,useMemo as t,useEffect as i,useCallback as a,createContext as r,createElement as n,useContext as o}from"react";import{set as s}from"es-cookie";import{getApi as c,previewCookie as l}from"prismic-javascript";import{camelCase as d}from"camel-case";import{string as p,optional as m,record as u,object as g,defaulted as y,func as h,array as w,union as f,boolean as v,enums as P,number as I,empty as b,coerce as D,assert as S}from"superstruct";import{pascalCase as _,pascalCaseTransformMerge as T}from"pascal-case";import{Link as k,RichText as E}from"prismic-dom";import{buildImgixFixed as N,buildImgixFluid as O}from"gatsby-plugin-imgix";import{v5 as x}from"uuid";import L from"md5";import R from"lodash.pick";import A from"lodash.omit";import B from"lodash.isplainobject";import{navigate as C}from"gatsby";const $={repositoryName:p(),accessToken:m(p()),releaseID:m(p()),schemas:u(p(),g()),linkResolver:y(h(),()=>()=>()=>{}),htmlSerializer:y(h(),()=>()=>()=>{}),fetchLinks:y(w(p()),[]),lang:y(p(),"*"),typePathsFilenamePrefix:y(p(),"prismic-typepaths---"),prismicToolbar:y(f([v(),P(["legacy"])]),!1),imageImgixParams:y(u(p(),m(f([p(),I(),v()]))),{auto:"format,compress",fit:"max",q:50}),imagePlaceholderImgixParams:y(u(p(),m(f([p(),I(),v()]))),{w:100,blur:15,q:20}),plugins:y(b(w()),[])},G=(g({...$,shouldDownloadImage:y(m(h()),()=>()=>!1),webhookSecret:m(p())}),g({...$,pathResolver:m(h()),schemasDigest:p()})),W=async(e,t)=>{const i={},a=Object.keys(t);return await Promise.all(a.map(async a=>{i[a]=await e(t[a],a)})),i},j=e=>_("Prismic "+e,{transform:T}),F="undefined"!=typeof window,M=e=>e.displayName||e.name||"Component",U=["alt","copyright","dimensions","url"],z=async(e,t)=>{const i=function(e){const t=e.match(/^https?:\/\/([^.]+)\.(wroom\.(?:test|io)|prismic\.io)/);return t?t[0]+"/api/v2":`https://${e}.prismic.io/api/v2`}(e);return await c(i,{accessToken:t})};var V,J,q,H;!function(e){e.Any="Any",e.Document="Document",e.Media="Media",e.Web="Web"}(V||(V={})),function(e){e.Boolean="Boolean",e.Color="Color",e.Date="Date",e.Embed="Embed",e.GeoPoint="GeoPoint",e.Group="Group",e.Image="Image",e.Link="Link",e.Number="Number",e.Select="Select",e.Slice="Slice",e.Slices="Slices",e.StructuredText="StructuredText",e.Text="Text",e.Timestamp="Timestamp",e.UID="UID",e.AlternateLanguages="AlternateLanguages"}(J||(J={})),function(e){e.ID="ID",e.Boolean="Boolean",e.String="String",e.Float="Float",e.Date="Date",e.JSON="JSON",e.Link="PrismicLinkType",e.Image="PrismicImageType",e.ImageThumbnail="PrismicImageThumbnailType",e.ImageThumbnails="PrismicImageThumbnailsType",e.Embed="PrismicEmbedType",e.GeoPoint="PrismicGeoPointType",e.StructuredText="PrismicStructuredTextType",e.AllDocumentTypes="PrismicAllDocumentTypes",e.Group="Group",e.Slices="Slices",e.AlternateLanguages="AlternateLanguages"}(q||(q={})),function(e){e.List="list",e.Grid="grid"}(H||(H={}));const Q=async(e,t,i,a,r)=>{const{createNodeId:n,createNode:o,createContentDigest:s,typePaths:c,normalizeStructuredTextField:l,normalizeLinkField:d,normalizeImageField:p,normalizeSlicesField:m}=r;switch(((e,t)=>{const i=JSON.stringify(e),a=t.find(e=>JSON.stringify(e.path)===i);if(a)return/^\[.*GroupType\]$/.test(a.type)?q.Group:/^\[.*SlicesType\]$/.test(a.type)?q.Slices:a.type})([...i,e],c)){case q.Image:{const n=R(t,U),o=A(t,U);return{...await p(e,n,i,a,r),thumbnails:await W(async t=>await p(e,t,i,a,r),o)}}case q.StructuredText:return await l(e,t,i,a,r);case q.Link:return await d(e,t,i,a,r);case q.Group:return await K(t,[...i,e],a,r);case q.Slices:{const c=await Promise.all(t.map(async(t,c)=>{var l;const d=n(`${a.type} ${a.id} ${e} ${c}`),p=await Y(t.primary,[...i,e,t.slice_type,"primary"],a,r),m=await K(t.items,[...i,e,t.slice_type,"items"],a,r),u={id:d,slice_type:t.slice_type,slice_label:null!==(l=t.slice_label)&&void 0!==l?l:void 0,primary:p,items:m,internal:{type:j(`${a.type} ${e} ${t.slice_type}`),contentDigest:s(t)}};return o(u),u.id}));return await m(e,c,[...i,e],a,r)}case q.AlternateLanguages:return await Promise.all(t.map(async t=>await d(e,{...t,link_type:V.Document},i,a,r)));default:return t}},Y=(e={},t,i,a)=>W((e,r)=>Q(r,e,t,i,a),e),K=(e=[],t,i,a)=>Promise.all(e.map(e=>Y(e,t,i,a))),X=async(e,t)=>{const{createNode:i,createContentDigest:a,createNodeId:r,pluginOptions:n}=t,{linkResolver:o}=n;let s=void 0;o&&(s=o({node:e}));const c=r(e.id),l=s?s(e):void 0,d=await Y(e.data,[e.type,"data"],e,t),p=await Q("alternate_languages",e.alternate_languages,[e.type],e,t),m={...e,id:c,prismicId:e.id,data:d,dataString:JSON.stringify(e.data),dataRaw:e.data,alternate_languages:p,url:l,internal:{type:j(e.type),contentDigest:a(e)},_previewable:e.id};return i(m),m.id},Z=async(e,t,i,a,r)=>{const{pluginOptions:n}=r,o=t.url;if(!o)return t;const s=N({url:o,sourceWidth:t.dimensions.width,sourceHeight:t.dimensions.height,args:{imgixParams:n.imageImgixParams,placeholderImgixParams:n.imagePlaceholderImgixParams}}),c=O({url:o,sourceWidth:t.dimensions.width,sourceHeight:t.dimensions.height,args:{imgixParams:n.imageImgixParams,placeholderImgixParams:n.imagePlaceholderImgixParams}});return{...t,fixed:s,fluid:c}},ee=async(e,t,i,a,r)=>{const{createNodeId:n,pluginOptions:o,context:s}=r,{getNodeById:c}=s,{linkResolver:l}=o;let d=void 0;l&&(d=l({key:e,value:t,node:a}));let p=void 0;return t&&t.link_type===V.Document&&t.id&&(p=n(t.id)),t&&t.link_type===V.Document&&t.id&&!t.isBroken&&await(async(e,t)=>{const{createNode:i,createNodeId:a,createContentDigest:r,pluginOptions:n,context:o}=t;if(e.link_type!==V.Document||!e.id||e.isBroken)return;const{hasNodeById:s}=o,{repositoryName:c,accessToken:l,fetchLinks:d}=n,p=a(e.id);if(s(p))return;i({id:p,internal:{type:j(e.type)+"__PLACEHOLDER",contentDigest:r(p)}});const m={};d&&(m.fetchLinks=d);const u=await z(c,l),g=await u.getByID(e.id,m);await X(g,t)})(t,r),new Proxy({...t,url:k.url(t,d),document:p,raw:t},{get:(e,i)=>"document"===i?t&&t.link_type===V.Document&&!t.isBroken&&p?c(p):null:e[i]})},te=(e,t,i,a,r)=>{const{context:n}=r,{hasNodeById:o,getNodeById:s}=n;return new Proxy(t,{get:(e,t)=>{const i=e[t];if(o(i)){const e=s(i);return{...e,__typename:e.internal.type}}return i}})},ie=async(e,t,i,a,r)=>{const{pluginOptions:n}=r,{linkResolver:o,htmlSerializer:s}=n;let c=void 0;o&&(c=o({key:e,value:t,node:a}));let l=void 0;return s&&(l=s({key:e,value:t,node:a})),{html:E.asHtml(t,c,l),text:E.asText(t),raw:t}};var ae;!function(e){e.IS_NOT_PREVIEW="IS_NOT_PREVIEW",e.IS_PREVIEW="IS_PREVIEW",e.DOCUMENT_LOADED="DOCUMENT_LOADED",e.RESET="RESET"}(ae||(ae={}));const re={isPreview:void 0,isLoading:!1,previewData:void 0,path:void 0},ne=(e,t)=>{switch(t.type){case ae.IS_NOT_PREVIEW:return{...e,isPreview:!1,isLoading:!1};case ae.IS_PREVIEW:return{...e,isPreview:!0,isLoading:!0};case ae.DOCUMENT_LOADED:{if(!t.payload)return{...e,isPreview:!1,isLoading:!1};const{rootNode:i,path:a}=t.payload,r={[d(i.internal.type)]:i};return{...e,previewData:r,path:a,isPreview:!0,isLoading:!1}}case ae.RESET:return re;default:throw new Error("Invalid error")}},oe=r=>{const[n,o]=e(ne,re),c=t(()=>{if(!F)return r;const e=window.__GATSBY_SOURCE_PRISMIC__[r.repositoryName];if(!e)throw new Error(`Could not find plugin context for repository: "${r.repositoryName}". Check that a gatsby-source-plugin instance exists for that repository. `);return(e=>{const t=D(e,G);return S(t,G),t})({...e.pluginOptions,schemasDigest:e.schemasDigest,schemas:{},...r})},[r]),{token:d,documentId:p}=t(()=>{var e,t;if(!F)return{};const i=new URLSearchParams(window.location.search);return{token:null!==(e=i.get("token"))&&void 0!==e?e:void 0,documentId:null!==(t=i.get("documentId"))&&void 0!==t?t:void 0}},[F?window.location.search:void 0]);i(()=>{const e=Boolean(d&&p);o({type:e?ae.IS_PREVIEW:ae.IS_NOT_PREVIEW})},[d,p]);const m=a(async()=>{var e;if(!n.isPreview||!d||!p)return;s(l,d);const t={};c.fetchLinks&&(t.fetchLinks=c.fetchLinks);const i=await z(c.repositoryName,c.accessToken),a=await i.getByID(p,t),r=await fetch(`/${c.typePathsFilenamePrefix}${c.schemasDigest}.json`,{headers:{"Content-Type":"application/json"}}),m=await r.json(),u=((e,t)=>{const i=new Map;return{createNode:e=>{i.set(e.id,e)},createNodeId:e=>x(e,"638f7a53-c567-4eca-8fc1-b23efb1cfb2b"),createContentDigest:e=>L(JSON.stringify(e)),normalizeImageField:Z,normalizeLinkField:ee,normalizeSlicesField:te,normalizeStructuredTextField:ie,typePaths:t,pluginOptions:e,context:{hasNodeById:e=>i.has(e),getNodeById:e=>i.get(e)}}})(c,m),{context:g}=u,{getNodeById:y}=g,h=y(await X(a,u)),w=null!==(e=c.pathResolver)&&void 0!==e?e:c.linkResolver,f=w?w({node:a})(a):void 0;o({type:ae.DOCUMENT_LOADED,payload:{rootNode:h,path:f}})},[n.isPreview]);return i(()=>{m()},[m]),n},se=(e,t)=>{if(B(e)){if(e._previewable===t._previewable)return t;if(e.prismicId===t.prismicId)return console.warn("Warning: Merging nested preview data using the prismicId field will be deprecated in gatsby-source-prismic v4.0.0.\n\nIf you are relying on this functionality, please update your GraphQL query to include the _previewable field on documents that should be previewable."),t;const i={};for(const a in e)i[a]=se(e[a],t);return i}return Array.isArray(e)?e.map(e=>se(e,t)):e},ce=({staticData:e,previewData:t,strategy:i="traverseAndReplace"})=>{if(e||t){if(!e)return t;if(!t)return e;switch(i){case"rootReplaceOrInsert":return{...e,...t};case"traverseAndReplace":default:{const i=Object.keys(t)[0];return!e.hasOwnProperty(i)||e[i]._previewable||e[i].prismicId?se(e,t[i]):(console.warn("Warning: Merging preview data implicitly will be deprecated in gatsby-source-prismic v4.0.0.\n\nIf you are relying on this functionality, please update your GraphQL query to include the _previewable field on documents that should be previewable."),{...e,...t})}}}},le={};var de;!function(e){e[e.AddPage=0]="AddPage",e[e.EnablePreviews=1]="EnablePreviews",e[e.DisablePreviews=2]="DisablePreviews"}(de||(de={}));const pe=e=>({pages:le,enabled:!1,...e}),me=(e,t)=>{switch(t.type){case de.AddPage:return{...e,pages:{...e.pages,[t.payload.path]:t.payload.data},enabled:!0};case de.EnablePreviews:return{...e,enabled:!0};case de.DisablePreviews:return{...e,enabled:!1}}},ue=r([pe(),()=>{}]),ge=({children:t,initialPages:i=le,initialEnabled:a=!1})=>{const r=e(me,pe({pages:i,enabled:a}));return n(ue.Provider,{value:r},t)},ye=()=>o(ue),he=(e,i)=>{const a=a=>{const[r]=ye(),o=a.data,s=r.pages[a.location.pathname],c=t(()=>r.enabled?ce({staticData:o,previewData:s,strategy:null==i?void 0:i.mergeStrategy}):o,[r.enabled,o,s]);return n(e,Object.assign({},a,{data:c}))};return a.displayName=`withPreview(${M(e)})`,a},we=(e,t)=>{const a=a=>{const[,r]=ye(),{isLoading:o,isPreview:s,previewData:c,path:l}=oe(t);return i(()=>{s&&c&&l&&(r({type:de.AddPage,payload:{path:l,data:c}}),C(l))},[s,c,l,r]),n(e,Object.assign({},a,{isPreview:s,isLoading:o}))};return a.displayName=`withPreviewResolver(${M(e)})`,a},fe=(e,t)=>{const i=i=>{const[a]=ye(),r=i.location.pathname;if(a.pages.hasOwnProperty(r)){const e=a.pages[r],o=e[Object.keys(e)[0]].type,s=t.templateMap[o];if(s)return n(s,Object.assign({},i));console.warn(`gatsby-source-prismic - An unpublished preview was detected, but a template component could not be found for a custom type of "${o}". Check that the templateMap option in withUnpublishedPreview includes a component for "${o}". withUnpublishedPreview will yield to the wrapped component to render.`)}return n(e,Object.assign({},i))};return i.displayName=`withUnpublishedPreview(${M(e)})`,he(i,{mergeStrategy:"rootReplaceOrInsert"})};export{ge as PreviewStoreProvider,ce as mergePrismicPreviewData,ye as usePreviewStore,oe as usePrismicPreview,he as withPreview,we as withPreviewResolver,fe as withUnpublishedPreview};
//# sourceMappingURL=gatsby-source-prismic.modern.js.map
