{"version":3,"file":"createSchemaCustomization.js","sources":["../../../src/gatsby-node/createSchemaCustomization.ts"],"sourcesContent":["import {\n\tAlternateLanguage,\n\tLinkField,\n\tLinkResolverFunction,\n\tLinkType,\n\tRichTextField,\n\tTitleField,\n\tasHTML,\n\tasLink,\n\tasText,\n\tisFilled,\n} from \"@prismicio/client\";\nimport type {\n\tCreateSchemaCustomizationArgs,\n\tGatsbyGraphQLObjectType,\n\tGatsbyGraphQLUnionType,\n} from \"gatsby\";\n\nimport { buildImageObjectType } from \"../lib/buildImageObjectType\";\nimport { buildImgixURLParamsInputObjectType } from \"../lib/buildImgixURLParamsInputObjectType\";\nimport { customTypeModelToGraphQLType } from \"../lib/customTypeModelToGraphQLType\";\nimport { getModelsCacheKey } from \"../lib/getModelsCacheKey\";\nimport { pascalCase } from \"../lib/pascalCase\";\nimport { resolveModels } from \"../lib/resolveModels\";\nimport { sharedSliceModelToGraphQLType } from \"../lib/sharedSliceModelToGraphQLType\";\n\nimport type { PluginOptions } from \"../types\";\n\nimport { GatsbyImageDataPlaceholderKind } from \"../constants\";\n\nexport const createSchemaCustomization = async <\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTLinkResolverFunction extends LinkResolverFunction<any> = LinkResolverFunction,\n>(\n\targs: CreateSchemaCustomizationArgs,\n\toptions: PluginOptions<TLinkResolverFunction>,\n): Promise<void> => {\n\tconst { customTypeModels, sharedSliceModels } = await resolveModels({\n\t\tpluginOptions: options,\n\t});\n\n\targs.cache.set(\n\t\tgetModelsCacheKey({ repositoryName: options.repositoryName }),\n\t\t{\n\t\t\tcustomTypeModels,\n\t\t\tsharedSliceModels,\n\t\t},\n\t);\n\n\tlet customTypeTypes: GatsbyGraphQLObjectType[] = [];\n\n\tfor (const customTypeModel of customTypeModels) {\n\t\tconst type = customTypeModelToGraphQLType({\n\t\t\tmodel: customTypeModel,\n\t\t\tsharedSliceModels,\n\t\t\tpluginOptions: options,\n\t\t\tgatsbyNodeArgs: args,\n\t\t});\n\n\t\tcustomTypeTypes = [...customTypeTypes, type];\n\t}\n\n\tlet sharedSliceTypes: GatsbyGraphQLUnionType[] = [];\n\n\tfor (const sharedSliceModel of sharedSliceModels) {\n\t\tconst type = sharedSliceModelToGraphQLType({\n\t\t\tmodel: sharedSliceModel,\n\t\t\tsharedSliceModels,\n\t\t\tpluginOptions: options,\n\t\t\tgatsbyNodeArgs: args,\n\t\t});\n\n\t\tsharedSliceTypes = [...sharedSliceTypes, type];\n\t}\n\n\tconst sharedTypes = [\n\t\targs.schema.buildUnionType({\n\t\t\tname: pascalCase(\"Prismic\", options.typePrefix, \"AllDocumentTypes\"),\n\t\t\ttypes: customTypeTypes.map((type) => type.config.name),\n\t\t}),\n\t\targs.schema.buildObjectType({\n\t\t\tname: pascalCase(\"Prismic\", options.typePrefix, \"AlternateLanguage\"),\n\t\t\tdescription:\n\t\t\t\t\"Metadata for alternate versions of a document in different languages.\",\n\t\t\tfields: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: \"ID!\",\n\t\t\t\t},\n\t\t\t\tuid: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t},\n\t\t\t\tlang: {\n\t\t\t\t\ttype: \"String!\",\n\t\t\t\t},\n\t\t\t\ttype: {\n\t\t\t\t\ttype: \"String!\",\n\t\t\t\t},\n\t\t\t\turl: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The URL of the Prismic document determined using the configured Route Resolvers or Link Resolver. If Route Resolvers or a Link Resolver is not given, this field is `null`.\",\n\t\t\t\t\tresolve: async (\n\t\t\t\t\t\tsource: AlternateLanguage,\n\t\t\t\t\t\t_args,\n\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\t\tctx: any,\n\t\t\t\t\t) => {\n\t\t\t\t\t\tconst node = await ctx.nodeModel.getNodeById({\n\t\t\t\t\t\t\tid: args.createNodeId(source.id),\n\t\t\t\t\t\t\ttype: pascalCase(\"Prismic\", options.typePrefix, source.type),\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn asLink(node, { linkResolver: options.linkResolver });\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tdocument: {\n\t\t\t\t\ttype: `${pascalCase(\n\t\t\t\t\t\t\"Prismic\",\n\t\t\t\t\t\toptions.typePrefix,\n\t\t\t\t\t\t\"AllDocumentTypes\",\n\t\t\t\t\t)}!`,\n\t\t\t\t\tresolve: (source: AlternateLanguage): string => {\n\t\t\t\t\t\treturn args.createNodeId(source.id);\n\t\t\t\t\t},\n\t\t\t\t\textensions: { link: {} },\n\t\t\t\t},\n\t\t\t\traw: {\n\t\t\t\t\ttype: \"JSON!\",\n\t\t\t\t\tresolve: (source: AlternateLanguage): AlternateLanguage => {\n\t\t\t\t\t\treturn source;\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\targs.schema.buildObjectType({\n\t\t\tname: pascalCase(\"Prismic\", options.typePrefix, \"EmbedField\"),\n\t\t\tdescription: \"oEmbed content from an oEmbed-enabled URL.\",\n\t\t\tfields: {\n\t\t\t\t// At least one field must be defined to supress a graphql-compose warning.\n\t\t\t\tid: \"ID!\",\n\t\t\t},\n\t\t\tinterfaces: [\"Node\"],\n\t\t\textensions: { infer: true },\n\t\t}),\n\t\targs.schema.buildObjectType({\n\t\t\tname: \"PrismicGeoPointField\",\n\t\t\tdescription: \"Geolocation coordinates.\",\n\t\t\tfields: {\n\t\t\t\tlatitude: {\n\t\t\t\t\ttype: \"Float\",\n\t\t\t\t\tdescription: \"The latitude value of the GeoPoint field.\",\n\t\t\t\t},\n\t\t\t\tlongitude: {\n\t\t\t\t\ttype: \"Float\",\n\t\t\t\t\tdescription: \"The longitude value of the GeoPoint field.\",\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\targs.schema.buildScalarType({\n\t\t\tname: \"PrismicRichText\",\n\t\t\tdescription:\n\t\t\t\t\"Text content with rich formatting capabilities used in Prismic documents.\",\n\t\t}),\n\t\targs.schema.buildObjectType({\n\t\t\tname: pascalCase(\"Prismic\", options.typePrefix, \"RichTextField\"),\n\t\t\tdescription: \"Rich Text provided in various formats.\",\n\t\t\tfields: {\n\t\t\t\ttext: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription: \"The Rich Text value formatted as text.\",\n\t\t\t\t\tresolve: (source: RichTextField | TitleField): string | null => {\n\t\t\t\t\t\tif (isFilled.richText(source)) {\n\t\t\t\t\t\t\treturn asText(source);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\thtml: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription: \"The Rich Text value formatted as HTML.\",\n\t\t\t\t\tresolve: (source: RichTextField | TitleField): string | null => {\n\t\t\t\t\t\tif (isFilled.richText(source)) {\n\t\t\t\t\t\t\treturn asHTML(source, {\n\t\t\t\t\t\t\t\tlinkResolver: options.linkResolver,\n\t\t\t\t\t\t\t\tserializer: options.htmlSerializer,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trichText: {\n\t\t\t\t\ttype: \"PrismicRichText!\",\n\t\t\t\t\tdescription: 'The Rich Text value in its \"raw\" form.',\n\t\t\t\t\tresolve: (\n\t\t\t\t\t\tsource: RichTextField | TitleField,\n\t\t\t\t\t): RichTextField | TitleField => source,\n\t\t\t\t},\n\t\t\t\t// TODO: Remove in next major version.\n\t\t\t\traw: {\n\t\t\t\t\ttype: \"PrismicRichText!\",\n\t\t\t\t\tdescription: 'The Rich Text value in its \"raw\" form.',\n\t\t\t\t\tdeprecationReason:\n\t\t\t\t\t\t\"This field has been renamed to `richText`. The `richText` field has the same value the `raw` field.\",\n\t\t\t\t\tresolve: (\n\t\t\t\t\t\tsource: RichTextField | TitleField,\n\t\t\t\t\t): RichTextField | TitleField => source,\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\targs.schema.buildEnumType({\n\t\t\tname: \"PrismicLinkType\",\n\t\t\tdescription: \"Types of a Prismic Link field value.\",\n\t\t\tvalues: {\n\t\t\t\tAny: {\n\t\t\t\t\tdescription: \"An unknown link type.\",\n\t\t\t\t},\n\t\t\t\tDocument: {\n\t\t\t\t\tdescription: \"A link to a document in the Prismic repository.\",\n\t\t\t\t},\n\t\t\t\tMedia: {\n\t\t\t\t\tdescription: \"A link to a file in the Prismic Media Library.\",\n\t\t\t\t},\n\t\t\t\tWeb: {\n\t\t\t\t\tdescription: \"A link to the web.\",\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\targs.schema.buildObjectType({\n\t\t\tname: pascalCase(\"Prismic\", options.typePrefix, \"LinkField\"),\n\t\t\tdescription:\n\t\t\t\t\"A link to the web, a document in the Prismic repository, or a file in the Prismic Media Library\",\n\t\t\tfields: {\n\t\t\t\tlink_type: {\n\t\t\t\t\ttype: \"PrismicLinkType\",\n\t\t\t\t\tdescription: \"The type of link for this field value.\",\n\t\t\t\t},\n\t\t\t\tisBroken: {\n\t\t\t\t\ttype: \"Boolean\",\n\t\t\t\t\tdescription: \"Determines if the linked document exists.\",\n\t\t\t\t},\n\t\t\t\turl: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The URL of the linked website, Prismic document, or file. If the field value is a Prismic document, the URL is determined using the configured Route Resolvers or Link Resolver. If Route Resolvers or a Link Resolver is not given, this field is `null`.\",\n\t\t\t\t\tresolve: (source: LinkField): string | null => {\n\t\t\t\t\t\tif (isFilled.link(source)) {\n\t\t\t\t\t\t\treturn asLink(source, { linkResolver: options.linkResolver });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\ttarget: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'`_blank` if the field value is configured to \"Open in a new window,\" `null` otherwise.',\n\t\t\t\t},\n\t\t\t\tsize: {\n\t\t\t\t\ttype: \"Int\",\n\t\t\t\t\tdescription: \"The file size of the linked file.\",\n\t\t\t\t},\n\t\t\t\tid: {\n\t\t\t\t\ttype: \"ID\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The ID of the selected Prismic document if the field links to a document.\",\n\t\t\t\t},\n\t\t\t\ttype: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The type of the selected Prismic document if the field links to a document.\",\n\t\t\t\t},\n\t\t\t\ttags: {\n\t\t\t\t\ttype: \"[String!]\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The list of tags for the selected Prismic document if the field links to a document.\",\n\t\t\t\t},\n\t\t\t\tlang: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The language of the selected Prismic document if the field links to a document.\",\n\t\t\t\t},\n\t\t\t\tslug: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The slug of the selected Prismic document if the field links to a document.\",\n\t\t\t\t},\n\t\t\t\tuid: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The UID of the selected Prismic document if the field links to a document that contains a UID field.\",\n\t\t\t\t},\n\t\t\t\tdocument: {\n\t\t\t\t\ttype: pascalCase(\"Prismic\", options.typePrefix, \"AllDocumentTypes\"),\n\t\t\t\t\tdescription: \"The Prismic document if the field links to a document.\",\n\t\t\t\t\tresolve: (source: LinkField): string | null => {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tisFilled.link(source) &&\n\t\t\t\t\t\t\tsource.link_type === LinkType.Document &&\n\t\t\t\t\t\t\t!source.isBroken\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\treturn args.createNodeId(source.id);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\textensions: { link: {} },\n\t\t\t\t},\n\t\t\t\tlocalFile: {\n\t\t\t\t\ttype: \"File\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The locally download file if the field links to a media file and the field is configured to download locally.\",\n\t\t\t\t\textensions: { link: {} },\n\t\t\t\t},\n\t\t\t\traw: {\n\t\t\t\t\ttype: \"JSON!\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"**Do not use this field unless you know what you are doing**. The unprocessed field value returned from the Prismic REST API.\",\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\targs.schema.buildInterfaceType({\n\t\t\tname: \"PrismicSlice\",\n\t\t\tdescription:\n\t\t\t\t\"A collection of fields used in flexible content areas (called Slice Zones) of a Prismic document.\",\n\t\t\tfields: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: \"ID!\",\n\t\t\t\t},\n\t\t\t\tslice_type: {\n\t\t\t\t\ttype: \"String!\",\n\t\t\t\t},\n\t\t\t\tslice_label: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\targs.schema.buildInterfaceType({\n\t\t\tname: \"PrismicSharedSlice\",\n\t\t\tdescription:\n\t\t\t\t\"A collection of fields used in flexible content areas (called Slice Zones) of a Prismic document.\",\n\t\t\tfields: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: \"ID!\",\n\t\t\t\t},\n\t\t\t\tslice_type: {\n\t\t\t\t\ttype: \"String!\",\n\t\t\t\t},\n\t\t\t\tslice_label: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t},\n\t\t\t\tvariation: {\n\t\t\t\t\ttype: \"String!\",\n\t\t\t\t},\n\t\t\t\tversion: {\n\t\t\t\t\ttype: \"String!\",\n\t\t\t\t},\n\t\t\t},\n\t\t\tinterfaces: [\"PrismicSlice\"],\n\t\t}),\n\t\targs.schema.buildObjectType({\n\t\t\tname: \"PrismicImageFieldDimensions\",\n\t\t\tdescription: \"Width and height of an image.\",\n\t\t\tfields: {\n\t\t\t\twidth: {\n\t\t\t\t\ttype: \"Int!\",\n\t\t\t\t\tdescription: \"The image's width in pixels.\",\n\t\t\t\t},\n\t\t\t\theight: {\n\t\t\t\t\ttype: \"Int!\",\n\t\t\t\t\tdescription: \"The image's height in pixels.\",\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\targs.schema.buildInterfaceType({\n\t\t\tname: \"PrismicImageFieldBase\",\n\t\t\tdescription: \"An Image field.\",\n\t\t\tfields: {\n\t\t\t\talt: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription: \"An alternative text for the image.\",\n\t\t\t\t},\n\t\t\t\tcopyright: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription: \"Copyright information for the image.\",\n\t\t\t\t},\n\t\t\t\tdimensions: {\n\t\t\t\t\ttype: \"PrismicImageFieldDimensions\",\n\t\t\t\t\tdescription: \"The image's width and height.\",\n\t\t\t\t},\n\t\t\t\turl: {\n\t\t\t\t\ttype: \"String\",\n\t\t\t\t\tdescription: \"The image's URL.\",\n\t\t\t\t},\n\t\t\t\tgatsbyImageData: {\n\t\t\t\t\ttype: \"JSON\",\n\t\t\t\t\tdescription: \"`gatsby-plugin-image` image data.\",\n\t\t\t\t},\n\t\t\t\tlocalFile: {\n\t\t\t\t\ttype: \"File\",\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The locally download image file if the field is configured to download locally.\",\n\t\t\t\t\textensions: { link: {} },\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\tbuildImageObjectType({\n\t\t\tschema: args.schema,\n\t\t\tcache: args.cache,\n\t\t\tpluginOptions: options,\n\t\t}),\n\t\targs.schema.buildEnumType({\n\t\t\tname: \"PrismicGatsbyImageDataPlaceholder\",\n\t\t\tdescription:\n\t\t\t\t\"The style of temporary image shown while the full image loads.\",\n\t\t\tvalues: {\n\t\t\t\tBLURRED: {\n\t\t\t\t\tvalue: GatsbyImageDataPlaceholderKind.Blurred,\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"This generates a very low-resolution version of the source image and displays it as a blurred background.\",\n\t\t\t\t},\n\t\t\t\tDOMINANT_COLOR: {\n\t\t\t\t\tvalue: GatsbyImageDataPlaceholderKind.DominantColor,\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"The default placeholder. This calculates the dominant color of the source image and uses it as a solid background color.\",\n\t\t\t\t},\n\t\t\t\tNONE: {\n\t\t\t\t\tvalue: GatsbyImageDataPlaceholderKind.None,\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t\"No placeholder. You can use the background color option to set a static background if you wish.\",\n\t\t\t\t},\n\t\t\t},\n\t\t}),\n\t\tbuildImgixURLParamsInputObjectType({\n\t\t\tschema: args.schema,\n\t\t}),\n\t];\n\n\tfor (const type of [\n\t\t...customTypeTypes,\n\t\t...sharedSliceTypes,\n\t\t...sharedTypes,\n\t]) {\n\t\t// Calling this function for each type individually, rather\n\t\t// than once with an array containing all types, is done for\n\t\t// easier testing. We can check if the action was called\n\t\t// without also handling the extra layer of an array.\n\t\targs.actions.createTypes(type);\n\t}\n\n\tconst customTypeModelIDs = customTypeModels.map(\n\t\t(customTypeModel) => customTypeModel.id,\n\t);\n\targs.cache.set(\n\t\t`${options.repositoryName}:customTypeModelIDs`,\n\t\tcustomTypeModelIDs,\n\t);\n};\n"],"names":[],"mappings":"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"}