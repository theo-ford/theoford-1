import { Response } from 'node-fetch';
import { GatsbyCache, Reporter } from 'gatsby';
import * as O from 'fp-ts/lib/Option';
import * as TE from 'fp-ts/lib/TaskEither';
import { Option } from 'fp-ts/lib/Option';
import { Semigroup } from 'fp-ts/lib/Semigroup';
import { Task } from 'fp-ts/lib/Task';
import { TaskEither } from 'fp-ts/lib/TaskEither';
import { ImgixSourceDataResolver } from './shared';
export declare type Maybe<T> = T | undefined;
export declare type Nullable<T> = Maybe<T | null>;
export declare type OptionalPromise<T> = T | Promise<T>;
export declare function invariant(condition: unknown, msg: string, reporter: Reporter): asserts condition;
export declare const noop: () => void;
export declare const transformUrlForWebProxy: (url: string, domain: string) => string;
export declare const ns: (namespace: string | undefined, str: string) => string;
export declare const getFromCache: <A>(key: string, cache: GatsbyCache) => Task<O.Option<A>>;
export declare const setToCache: <A>(key: string, cache: GatsbyCache) => (value: A) => Task<A>;
export declare const getFromCacheOr: <A, B>(key: string, cache: GatsbyCache, f: () => TE.TaskEither<A, B>) => TE.TaskEither<A, B>;
export declare const fetch: (url: string) => TaskEither<Error, Response>;
export declare const fetchJSON: <A>(url: string) => TE.TaskEither<Error, A>;
export declare const fetchBase64: (url: string) => TE.TaskEither<Error, string>;
export declare const setURLSearchParam: (key: string, value: string | number) => (url: string) => string;
export declare const appendURLSearchParam: (key: string, value: string | number) => (url: string) => string;
export declare const deleteURLSearchParam: (key: string) => (url: string) => string;
export declare const semigroupImgixUrlParams: Semigroup<Partial<Record<"auto" | "fill" | "blendalign" | "ba" | "blend" | "blendalpha" | "balph" | "blendcolor" | "blend-clr" | "blendclr" | "faces" | "blendcrop" | "bc" | "crop" | "blendfit" | "bf" | "blendh" | "bh" | "hue" | "blendmode" | "bm" | "blendpad" | "bp" | "blendsize" | "bs" | "blendw" | "bw" | "blendx" | "bx" | "blendy" | "by" | "b" | "border" | "width" | "dpr" | "palette" | "mask" | "duotone" | "fillcolor" | "blur" | "fit" | "f" | "h" | "height" | "invert" | "inv" | "ma" | "markalign" | "mark" | "markalpha" | "malph" | "mb" | "markbase" | "mf" | "markfit" | "markw" | "markh" | "mh" | "mp" | "markpad" | "ms" | "markscale" | "mw" | "mx" | "markx" | "my" | "marky" | "m" | "max-height" | "max-width" | "min-height" | "min-width" | "monochrome" | "mono" | "or" | "trim" | "trimcolor" | "trimmd" | "trimpad" | "trimsd" | "trimtol" | "txtalign" | "ta" | "txt" | "txtclip" | "tcl" | "txtcolor" | "txt-clr" | "txtclr" | "tc" | "txtfit" | "tf" | "txtfont" | "txtlead" | "txtlig" | "txtlinecolor" | "txt-line-clr" | "txtlineclr" | "txtline" | "tl" | "txtpad" | "tp" | "txtshad" | "tsh" | "tsz" | "txtsize" | "txttrack" | "tt" | "txtwidth" | "t" | "usm" | "blend-align" | "blend-alpha" | "blend-color" | "blend-crop" | "blend-fit" | "blend-h" | "blend-mode" | "blend-pad" | "blend-size" | "blend-w" | "blend-x" | "blend-y" | "fill-color" | "mark-align" | "mark-alpha" | "mark-base" | "mark-fit" | "mark-h" | "mark-pad" | "mark-scale" | "mark-w" | "mark-x" | "mark-y" | "max-h" | "max-w" | "min-h" | "min-w" | "orient" | "trim-color" | "trim-md" | "trim-pad" | "trim-sd" | "trim-tol" | "txt-align" | "txt-clip" | "txt-color" | "txt-fit" | "txt-font" | "txt-lead" | "txt-lig" | "txt-line-color" | "txt-line" | "txt-pad" | "txt-shad" | "txt-size" | "txt-track" | "txt-width" | "w" | "ar" | "bg" | "border-radius-inner" | "border-radius" | "bri" | "ch" | "chromasub" | "colorquant" | "colors" | "con" | "corner-radius" | "cs" | "dl" | "dpi" | "duotone-alpha" | "exp" | "expires" | "faceindex" | "facepad" | "flip" | "fm" | "fp-debug" | "fp-x" | "fp-y" | "fp-z" | "gam" | "high" | "htn" | "lossless" | "maskbg" | "nr" | "nrs" | "pad" | "page" | "prefix" | "px" | "q" | "rect" | "rot" | "sat" | "sepia" | "shad" | "sharp" | "usmrad" | "vib", string | number | boolean | undefined>>>;
export declare const setURLSearchParams: <K extends string>(url: string) => (params: Record<K, string | undefined>) => string;
export declare const createURLSignature: (secureUrlToken: string) => (url: string) => string;
export declare const buildBase64URL: (contentType: string, base64: string) => string;
export declare const signURL: (secureUrlToken: Option<string>) => (url: string) => string;
export declare const join: <A>(separator?: string | undefined) => (arr: A[]) => string;
export declare const taskEitherFromSourceDataResolver: <TSource, TData>(resolver: ImgixSourceDataResolver<TSource, TData>, predicate?: ((data: TData | null) => boolean) | undefined) => (source: TSource) => TE.TaskEither<Error, TData>;
