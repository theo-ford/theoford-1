import { GatsbyCache } from 'gatsby';
import { GraphQLInputObjectType } from 'gatsby/graphql';
import * as TE from 'fp-ts/lib/TaskEither';
import { TaskEither } from 'fp-ts/lib/TaskEither';
import { ImgixMetadata } from './types';
export declare const ImgixUrlParamsInputType: GraphQLInputObjectType;
export declare type ImgixSourceDataResolver<TSource, TData> = (obj: TSource) => TData | null | undefined | void | Promise<TData | null | undefined | void>;
export declare const fetchImgixMetadata: (cache: GatsbyCache, secureUrlToken?: string | undefined) => (url: string) => TE.TaskEither<Error, ImgixMetadata>;
export declare const fetchImgixBase64Url: (cache: GatsbyCache) => (url: string) => TE.TaskEither<Error, string>;
export declare const resolveDimensions: <TSource>(source: TSource, resolveWidth: ImgixSourceDataResolver<TSource, number>, resolveHeight: ImgixSourceDataResolver<TSource, number>, cache: GatsbyCache, secureUrlToken?: string | undefined) => (url: string) => TaskEither<Error, [number, number]>;
