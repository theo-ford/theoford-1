import{GraphQLInputObjectType as e,GraphQLInt as r,GraphQLFloat as t,GraphQLBoolean as a,GraphQLString as i,GraphQLNonNull as s,GraphQLObjectType as o,GraphQLList as n}from"gatsby/graphql";import{of as l}from"fp-ts/lib/Task";import{chain as m,rightTask as p,right as c,tryCatch as d,taskEither as h,fold as u,map as g,getOrElseW as f}from"fp-ts/lib/TaskEither";import{pipe as y}from"fp-ts/lib/pipeable";import{cons as x,map as w,uniq as P,sort as b}from"fp-ts/lib/Array";import{fold as v,fromNullable as S,some as W}from"fp-ts/lib/Option";import{reduceWithIndex as U,filter as I,filterMap as k}from"fp-ts/lib/Record";import{eqNumber as R}from"fp-ts/lib/Eq";import{ordNumber as H}from"fp-ts/lib/Ord";import T from"node-fetch";import $ from"md5";import{getObjectSemigroup as j}from"fp-ts/lib/Semigroup";import{flow as V}from"fp-ts/lib/function";import E from"imgix-url-params/dist/parameters.json";import{camelCase as L}from"camel-case";import{sequenceT as M}from"fp-ts/lib/Apply";const A=()=>{},B=(e,r,t)=>y(((e,r)=>()=>r.get(e).then(e=>S(e)))(e,r),p,m(v(V(t,m(V(((e,r)=>t=>()=>r.set(e,t).then(()=>t))(e,r),e=>p(e)))),c))),_=e=>d(()=>T(e),e=>new Error(String(e))),q=(V(_,m(e=>p(()=>e.buffer())),m(e=>c(e.toString("base64")))),j()),z=e=>r=>r.join(e),O=(e,r)=>t=>d(()=>Promise.resolve(e(t)).then(e=>null==e?Promise.reject("Resolved data is null or undefined"):r?r(e)?e:Promise.reject("Resolved data is invalid."):e),e=>new Error(String(e))),D=[1,1.5,2],C=[.25,.5,1.5,2],F={w:100,blur:15,q:20},G=(e,r)=>t=>y(t,k(e=>W(void 0===e?void 0:String(e))),(e=>r=>{const t=new URL(e),a=y(r,U([],(e,r,t)=>void 0===t?x(e,r):r)),i=y(r,I(e=>void 0!==e)),s=((e,r)=>{const t=new URLSearchParams(e.toString());return r.forEach((e,r)=>{null==e?t.delete(r):t.set(r,e)}),t})(t.searchParams,new URLSearchParams(i));return s.forEach((e,r)=>{a.includes(r)&&s.delete(r)}),t.search=s.toString(),t.toString()})(e),(e=>r=>y(e,v(()=>r,e=>{return y(r,e=>{const r=new URL(e);return r.searchParams.delete("s"),r.toString()},(t=(e=>r=>y(new URL(r),r=>e+r.pathname+r.search,$))(e)(r),e=>{const r=new URL(e);return r.searchParams.append("s",String(t)),r.toString()}));var t})))(S(r))),J=(e,r)=>t=>y(q.concat(F,t),G(e,r)),K=new e({name:"ImgixUrlParamsInput",fields:Object.keys(E.parameters).reduce((e,s)=>{const o=E.parameters[s],n=L(s),l=Array.from(new Set(o.expects.map(e=>e.type))),m=l.every(e=>"integer"===e||"unit_scalar"===e)?r:l.every(e=>"integer"===e||"unit_scalar"===e||"number"===e)?t:l.every(e=>"boolean"===e)?a:i;if(e[n]={type:m,description:o.short_description+("."===o.short_description.slice(-1)?"":".")},"default"in o&&(e[n].description=e[n].description+` Default: \`${o.default}\`.`),"url"in o&&(e[n].description=e[n].description+` [See docs](${o.url}).`),"aliases"in o)for(const r of o.aliases)e[L(r)]={...e[n],description:`Alias for \`${n}\`.`};return e},{})}),N=M(h),Q=(e,r,t,a,i)=>s=>y(N(O(r)(e),O(t)(e)),u(()=>y(s,((e,r)=>t=>B("gatsby-plugin-imgix-metadata-"+t,e,()=>y({fm:"json"},G(t,r),e=>(e=>y(e,_,m(e=>p(()=>e.json()))))(e))))(a,i),g(({PixelWidth:e,PixelHeight:r})=>[e,r])),c)),X=({resolveUrl:e,secureUrlToken:r,defaultImgixParams:t={}})=>({type:i,args:{imgixParams:{type:K,defaultValue:{}}},resolve:(a,i)=>y(a,O(e),g(e=>{var a;return y(q.concat(t,null!==(a=i.imgixParams)&&void 0!==a?a:{}),G(e,r))}),u(()=>l(void 0),l))()}),Y=e=>X(e),Z=({resolveUrl:e=(e=>e.base64),cache:r})=>({type:new s(i),resolve:t=>y(t,O(e),m((e=>r=>B("gatsby-plugin-imgix-base64-url-"+r,e,()=>y(r,_,m(e=>y(p(()=>e.buffer()),m(e=>c(e.toString("base64"))),m(r=>c(((e,r)=>`data:${e};base64,${r}`)(String(e.headers.get("content-type")),r))))))))(r)),u(()=>l(void 0),l))()}),ee=({name:e,cache:t})=>new o({name:e,fields:{base64:Z({cache:t}),src:{type:new s(i)},srcSet:{type:new s(i)},srcWebp:{type:new s(i)},srcSetWebp:{type:new s(i)},sizes:{type:new s(i)},width:{type:new s(r)},height:{type:new s(r)}}}),re=({type:e,resolveUrl:t,resolveWidth:a=A,resolveHeight:i=A,secureUrlToken:s,cache:o,defaultImgixParams:n,defaultPlaceholderImgixParams:p})=>({type:e,args:{width:{type:r,defaultValue:400},height:{type:r},imgixParams:{type:K,defaultValue:{}},placeholderImgixParams:{type:K,defaultValue:{}}},resolve:(e,r)=>y(e,O(t,e=>"string"==typeof e),m(t=>y(t,Q(e,a,i,o,s),g(([e,a])=>(({url:e,sourceWidth:r,sourceHeight:t,secureUrlToken:a,args:i={}})=>{const s=r/t;let o,n;null!=i.width&&null!=i.height?(o=i.width,n=i.height):null!=i.width?(o=i.width,n=Math.round(o/s)):null!=i.height?(o=Math.round(i.height*s),n=i.height):(o=400,n=Math.round(o/s));const l=J(e,a)({...i.imgixParams,...i.placeholderImgixParams}),m=G(e,a)({...i.imgixParams,w:o,h:n}),p=((e,r)=>t=>y(D,w(a=>y(q.concat(t,{dpr:a}),G(e,r),e=>`${e} ${a}x`)),z(", ")))(e,a)({...i.imgixParams,w:o,h:n});return{base64:l,width:o,height:n,src:m,srcWebp:m,srcSet:p,srcSetWebp:p}})({url:t,sourceWidth:e,sourceHeight:a,secureUrlToken:s,args:{...r,imgixParams:{...n,...r.imgixParams},placeholderImgixParams:{...p,...r.placeholderImgixParams}}})))),f(()=>l(void 0)))()}),te=e=>re(e),ae=({name:e,cache:r})=>new o({name:e,fields:{base64:Z({cache:r}),src:{type:new s(i)},srcSet:{type:new s(i)},srcWebp:{type:new s(i)},srcSetWebp:{type:new s(i)},sizes:{type:new s(i)},aspectRatio:{type:new s(t)}}}),ie=({type:e,resolveUrl:t,resolveWidth:a=A,resolveHeight:i=A,secureUrlToken:s,cache:o,defaultImgixParams:p,defaultPlaceholderImgixParams:c})=>({type:e,args:{maxWidth:{type:r,defaultValue:800},maxHeight:{type:r},srcSetBreakpoints:{type:new n(r)},imgixParams:{type:K,defaultValue:{}},placeholderImgixParams:{type:K,defaultValue:{}}},resolve:(e,r)=>y(e,O(t,e=>"string"==typeof e),m(t=>y(t,Q(e,a,i,o,s),g(([e,a])=>(({url:e,sourceWidth:r,sourceHeight:t,secureUrlToken:a,args:i={}})=>{var s,o;const n=r/t,l=null!==(s=i.maxWidth)&&void 0!==s?s:800,m=J(e,a)({...i.imgixParams,...i.placeholderImgixParams}),p=G(e,a)({...i.imgixParams,w:l,h:i.maxHeight}),c=((e,r)=>t=>({aspectRatio:a,maxWidth:i,srcSetBreakpoints:s=C.map(e=>i*e)})=>y(x(i,s),P(R),b(H),w(i=>y(q.concat(t,{w:Math.round(i),h:Math.round(i/a)}),G(e,r),e=>`${e} ${Math.round(i)}w`)),z(", ")))(e,a)(null!==(o=i.imgixParams)&&void 0!==o?o:{})({aspectRatio:n,maxWidth:l,srcSetBreakpoints:i.srcSetBreakpoints});return{base64:m,aspectRatio:n,src:p,srcWebp:p,srcSet:c,srcSetWebp:c,sizes:""}})({url:t,sourceWidth:e,sourceHeight:a,secureUrlToken:s,args:{...r,imgixParams:{...p,...r.imgixParams},placeholderImgixParams:{...c,...r.placeholderImgixParams}}})))),f(()=>l(void 0)))()}),se=e=>ie(e);export{re as createImgixFixedFieldConfig,te as createImgixFixedSchemaFieldConfig,ee as createImgixFixedType,ie as createImgixFluidFieldConfig,se as createImgixFluidSchemaFieldConfig,ae as createImgixFluidType,X as createImgixUrlFieldConfig,Y as createImgixUrlSchemaFieldConfig};
//# sourceMappingURL=node.modern.js.map
