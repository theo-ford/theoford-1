"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const devMsg = require("./lib/devMsg.cjs");
const isFilled = require('./_node_modules/@prismicio/client/dist/helpers/isFilled.cjs');
const asText = require('./_node_modules/@prismicio/client/dist/helpers/asText.cjs');
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
const PrismicText = (props) => {
  if (typeof process !== "undefined" && process.env.NODE_ENV === "development") {
    if ("className" in props) {
      console.warn(`[PrismicText] className cannot be passed to <PrismicText> since it renders plain text without a wrapping component. For more details, see ${devMsg.devMsg("classname-is-not-a-valid-prop")}.`, props.field);
    }
    if (typeof props.field === "string") {
      throw new Error(`[PrismicText] The "field" prop only accepts a Rich Text or Title field's value but was provided a different type of field instead (e.g. a Key Text or Select field). You can resolve this error by rendering the field value inline without <PrismicText>. For more details, see ${devMsg.devMsg("prismictext-works-only-with-rich-text-and-title-fields")}`);
    }
  }
  return React__namespace.useMemo(() => {
    if (isFilled.richText(props.field)) {
      const text = asText.asText(props.field, props.separator);
      return /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: text });
    } else {
      return props.fallback != null ? /* @__PURE__ */ jsxRuntime.jsx(jsxRuntime.Fragment, { children: props.fallback }) : null;
    }
  }, [props.field, props.fallback, props.separator]);
};
exports.PrismicText = PrismicText;
//# sourceMappingURL=PrismicText.cjs.map
