import * as React from "react";
import { usePrismicClient } from "./usePrismicClient.js";
const reducer = (state, action) => {
  switch (action[0]) {
    case "start": {
      return { state: "loading" };
    }
    case "succeed": {
      return { state: "loaded", data: action[1] };
    }
    case "fail": {
      return {
        ...state,
        state: "failed",
        error: action[1]
      };
    }
  }
};
const initialState = {
  state: "idle"
};
const isParams = (value) => {
  return typeof value === "object" && value !== null && !Array.isArray(value);
};
const useStatefulPrismicClientMethod = (methodName, args, explicitClient) => {
  const lastArg = args[args.length - 1];
  const { client: lastArgExplicitClient, skip, ...params } = isParams(lastArg) ? lastArg : {};
  const argsWithoutParams = isParams(lastArg) ? args.slice(0, -1) : args;
  const client = usePrismicClient(explicitClient || lastArgExplicitClient);
  const [state, dispatch] = React.useReducer(reducer, initialState);
  React.useEffect(
    () => {
      if (!skip) {
        {
          dispatch(["start"]);
        }
        client[methodName].call(
          client,
          ...argsWithoutParams,
          params
        ).then((result) => {
          {
            dispatch(["succeed", result]);
          }
        }).catch((error) => {
          {
            dispatch(["fail", error]);
          }
        });
      }
    },
    // We must disable exhaustive-deps since we are using
    // JSON.stringify on params (effectively a deep equality check).
    // We want this effect to run again anytime params change.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [
      client,
      methodName,
      skip,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(argsWithoutParams),
      // eslint-disable-next-line react-hooks/exhaustive-deps
      JSON.stringify(params)
    ]
  );
  return React.useMemo(() => [
    state.data,
    {
      state: state.state,
      error: state.error
    }
  ], [state]);
};
export {
  useStatefulPrismicClientMethod
};
//# sourceMappingURL=useStatefulPrismicClientMethod.js.map
