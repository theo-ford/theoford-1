"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const asLinkAttrs = require('./../_node_modules/@prismicio/client/dist/helpers/asLinkAttrs.cjs');
require("@prismicio/richtext");
const devMsg = require("../lib/devMsg.cjs");
const isInternalURL = require("../lib/isInternalURL.cjs");
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
const defaultComponent = "a";
const PrismicLink = React__namespace.forwardRef(function PrismicLink2({ field, document: doc, linkResolver, internalComponent, externalComponent, ...restProps }, ref) {
  if (typeof process !== "undefined" && process.env.NODE_ENV === "development") {
    if (field) {
      if (!field.link_type) {
        console.error(`[PrismicLink] This "field" prop value caused an error to be thrown.
`, field);
        throw new Error(`[PrismicLink] The provided field is missing required properties to properly render a link. The link will not render. For more details, see ${devMsg.devMsg("missing-link-properties")}`);
      } else if (Object.keys(field).length > 1 && !("url" in field || "uid" in field || "id" in field)) {
        console.warn(`[PrismicLink] The provided field is missing required properties to properly render a link. The link may not render correctly. For more details, see ${devMsg.devMsg("missing-link-properties")}`, field);
      }
    } else if (doc) {
      if (!("url" in doc || "id" in doc)) {
        console.warn(`[PrismicLink] The provided document is missing required properties to properly render a link. The link may not render correctly. For more details, see ${devMsg.devMsg("missing-link-properties")}`, doc);
      }
    }
  }
  const { href: computedHref, rel: computedRel, ...attrs } = asLinkAttrs.asLinkAttrs(field ?? doc, {
    linkResolver,
    rel: typeof restProps.rel === "function" ? restProps.rel : void 0
  });
  let rel = computedRel;
  if ("rel" in restProps && typeof restProps.rel !== "function") {
    rel = restProps.rel;
  }
  const href = ("href" in restProps ? restProps.href : computedHref) || "";
  const InternalComponent = internalComponent || defaultComponent;
  const ExternalComponent = externalComponent || defaultComponent;
  const Component = href && isInternalURL.isInternalURL(href) ? InternalComponent : ExternalComponent;
  return /* @__PURE__ */ jsxRuntime.jsx(Component, { ref, ...attrs, ...restProps, href, rel });
});
exports.PrismicLink = PrismicLink;
exports.defaultComponent = defaultComponent;
//# sourceMappingURL=PrismicLink.cjs.map
