import { jsx } from "react/jsx-runtime";
import * as React from "react";
import { asLinkAttrs } from './../_node_modules/@prismicio/client/dist/helpers/asLinkAttrs.js';
import "@prismicio/richtext";
import { devMsg } from "../lib/devMsg.js";
import { isInternalURL } from "../lib/isInternalURL.js";
const defaultComponent = "a";
const PrismicLink = React.forwardRef(function PrismicLink2({ field, document: doc, linkResolver, internalComponent, externalComponent, ...restProps }, ref) {
  if (typeof process !== "undefined" && process.env.NODE_ENV === "development") {
    if (field) {
      if (!field.link_type) {
        console.error(`[PrismicLink] This "field" prop value caused an error to be thrown.
`, field);
        throw new Error(`[PrismicLink] The provided field is missing required properties to properly render a link. The link will not render. For more details, see ${devMsg("missing-link-properties")}`);
      } else if (Object.keys(field).length > 1 && !("url" in field || "uid" in field || "id" in field)) {
        console.warn(`[PrismicLink] The provided field is missing required properties to properly render a link. The link may not render correctly. For more details, see ${devMsg("missing-link-properties")}`, field);
      }
    } else if (doc) {
      if (!("url" in doc || "id" in doc)) {
        console.warn(`[PrismicLink] The provided document is missing required properties to properly render a link. The link may not render correctly. For more details, see ${devMsg("missing-link-properties")}`, doc);
      }
    }
  }
  const { href: computedHref, rel: computedRel, ...attrs } = asLinkAttrs(field ?? doc, {
    linkResolver,
    rel: typeof restProps.rel === "function" ? restProps.rel : void 0
  });
  let rel = computedRel;
  if ("rel" in restProps && typeof restProps.rel !== "function") {
    rel = restProps.rel;
  }
  const href = ("href" in restProps ? restProps.href : computedHref) || "";
  const InternalComponent = internalComponent || defaultComponent;
  const ExternalComponent = externalComponent || defaultComponent;
  const Component = href && isInternalURL(href) ? InternalComponent : ExternalComponent;
  return /* @__PURE__ */ jsx(Component, { ref, ...attrs, ...restProps, href, rel });
});
export {
  PrismicLink,
  defaultComponent
};
//# sourceMappingURL=PrismicLink.js.map
