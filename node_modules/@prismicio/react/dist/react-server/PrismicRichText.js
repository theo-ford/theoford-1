import { jsx, Fragment } from "react/jsx-runtime";
import * as React from "react";
import * as prismicR from "@prismicio/richtext";
import { PrismicLink } from "./PrismicLink.js";
import { devMsg } from "../lib/devMsg.js";
import { richText } from './../_node_modules/@prismicio/client/dist/helpers/isFilled.js';
const createDefaultSerializer = (args) => prismicR.wrapMapSerializer({
  heading1: ({ children, key }) => /* @__PURE__ */ jsx("h1", { children }, key),
  heading2: ({ children, key }) => /* @__PURE__ */ jsx("h2", { children }, key),
  heading3: ({ children, key }) => /* @__PURE__ */ jsx("h3", { children }, key),
  heading4: ({ children, key }) => /* @__PURE__ */ jsx("h4", { children }, key),
  heading5: ({ children, key }) => /* @__PURE__ */ jsx("h5", { children }, key),
  heading6: ({ children, key }) => /* @__PURE__ */ jsx("h6", { children }, key),
  paragraph: ({ children, key }) => /* @__PURE__ */ jsx("p", { children }, key),
  preformatted: ({ node, key }) => /* @__PURE__ */ jsx("pre", { children: node.text }, key),
  strong: ({ children, key }) => /* @__PURE__ */ jsx("strong", { children }, key),
  em: ({ children, key }) => /* @__PURE__ */ jsx("em", { children }, key),
  listItem: ({ children, key }) => /* @__PURE__ */ jsx("li", { children }, key),
  oListItem: ({ children, key }) => /* @__PURE__ */ jsx("li", { children }, key),
  list: ({ children, key }) => /* @__PURE__ */ jsx("ul", { children }, key),
  oList: ({ children, key }) => /* @__PURE__ */ jsx("ol", { children }, key),
  image: ({ node, key }) => {
    const img = /* @__PURE__ */ jsx("img", { src: node.url, alt: node.alt ?? void 0, "data-copyright": node.copyright ? node.copyright : void 0 });
    return /* @__PURE__ */ jsx("p", { className: "block-img", children: node.linkTo ? /* @__PURE__ */ jsx(PrismicLink, { linkResolver: args.linkResolver, internalComponent: args.internalLinkComponent, externalComponent: args.externalLinkComponent, field: node.linkTo, children: img }) : img }, key);
  },
  embed: ({ node, key }) => /* @__PURE__ */ jsx("div", { "data-oembed": node.oembed.embed_url, "data-oembed-type": node.oembed.type, "data-oembed-provider": node.oembed.provider_name, dangerouslySetInnerHTML: { __html: node.oembed.html ?? "" } }, key),
  hyperlink: ({ node, children, key }) => /* @__PURE__ */ jsx(PrismicLink, { field: node.data, linkResolver: args.linkResolver, internalComponent: args.internalLinkComponent, externalComponent: args.externalLinkComponent, children }, key),
  label: ({ node, children, key }) => /* @__PURE__ */ jsx("span", { className: node.data.label, children }, key),
  span: ({ text, key }) => {
    const result = [];
    let i = 0;
    for (const line of text.split("\n")) {
      if (i > 0) {
        result.push(/* @__PURE__ */ jsx("br", {}, `${i}__break`));
      }
      result.push(/* @__PURE__ */ jsx(React.Fragment, { children: line }, `${i}__line`));
      i++;
    }
    return /* @__PURE__ */ jsx(React.Fragment, { children: result }, key);
  }
});
function PrismicRichText({ linkResolver, field, fallback, components, externalLinkComponent, internalLinkComponent, ...restProps }) {
  return React.useMemo(() => {
    if (typeof process !== "undefined" && process.env.NODE_ENV === "development") {
      if ("className" in restProps) {
        console.warn(`[PrismicRichText] className cannot be passed to <PrismicRichText> since it renders an array without a wrapping component. For more details, see ${devMsg("classname-is-not-a-valid-prop")}.`, field);
      }
    }
    if (richText(field)) {
      const serializer = prismicR.composeSerializers(typeof components === "object" ? prismicR.wrapMapSerializer(components) : components, createDefaultSerializer({
        linkResolver,
        internalLinkComponent,
        externalLinkComponent
      }));
      const serialized = prismicR.serialize(field, (type, node, text, children, key) => {
        const result = serializer(type, node, text, children, key);
        if (React.isValidElement(result) && result.key == null) {
          return React.cloneElement(result, { key });
        } else {
          return result;
        }
      });
      return /* @__PURE__ */ jsx(Fragment, { children: serialized });
    } else {
      return fallback != null ? /* @__PURE__ */ jsx(Fragment, { children: fallback }) : null;
    }
  }, [
    field,
    internalLinkComponent,
    externalLinkComponent,
    components,
    linkResolver,
    fallback
  ]);
}
export {
  PrismicRichText
};
//# sourceMappingURL=PrismicRichText.js.map
