import * as React from "react";
import * as prismic from "@prismicio/client";
import { JSXFunctionSerializer, JSXMapSerializer } from "../types";
import { LinkProps } from "./PrismicLink";
/**
 * Props for `<PrismicRichText>`.
 */
export type PrismicRichTextProps<LinkResolverFunction extends prismic.LinkResolverFunction<any> = prismic.LinkResolverFunction> = {
    /**
     * The Prismic Rich Text field to render.
     */
    field: prismic.RichTextField | null | undefined;
    /**
     * The Link Resolver used to resolve links.
     *
     * @remarks
     * If your app uses Route Resolvers when querying for your Prismic
     * repository's content, a Link Resolver does not need to be provided.
     * @see Learn about Link Resolvers and Route Resolvers {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver}
     */
    linkResolver?: LinkResolverFunction;
    /**
     * A map or function that maps a Rich Text block to a React component.
     *
     * @remarks
     * Prefer using a map serializer over the function serializer when possible.
     * The map serializer is simpler to maintain.
     * @example A map serializer.
     *
     * ```jsx
     * {
     *   heading1: ({children}) => <Heading>{children}</Heading>
     * }
     * ```
     *
     * @example A function serializer.
     *
     * ```jsx
     * (type, node, content, children) => {
     * 	switch (type) {
     * 		case "heading1": {
     * 			return <Heading>{children}</Heading>;
     * 		}
     * 	}
     * };
     * ```
     */
    components?: JSXMapSerializer | JSXFunctionSerializer;
    /**
     * The React component rendered for links when the URL is internal.
     *
     * @defaultValue `<a>`
     */
    internalLinkComponent?: React.ComponentType<LinkProps>;
    /**
     * The React component rendered for links when the URL is external.
     *
     * @defaultValue `<a>`
     */
    externalLinkComponent?: React.ComponentType<LinkProps>;
    /**
     * The value to be rendered when the field is empty. If a fallback is not
     * given, `null` will be rendered.
     */
    fallback?: React.ReactNode;
};
/**
 * React component that renders content from a Prismic Rich Text field. By
 * default, HTML elements are rendered for each piece of content. A `heading1`
 * block will render an `<h1>` HTML element, for example. Links will use
 * `<PrismicLink>` by default which can be customized using the
 * `internalLinkComponent` and `externalLinkComponent` props.
 *
 * To customize the components that are rendered, provide a map or function
 * serializer to the `components` prop.
 *
 * @remarks
 * This component returns a React fragment with no wrapping element around the
 * content. If you need a wrapper, add a component around `<PrismicRichText>`.
 * @example Rendering a Rich Text field using the default HTMl elements.
 *
 * ```jsx
 * <PrismicRichText field={document.data.content} />;
 * ```
 *
 * @example Rendering a Rich Text field using a custom set of React components.
 *
 * ```jsx
 * <PrismicRichText
 * 	field={document.data.content}
 * 	components={{
 * 		heading1: ({ children }) => <Heading>{children}</Heading>,
 * 	}}
 * />;
 * ```
 *
 * @param props - Props for the component.
 *
 * @returns The Rich Text field's content as React components.
 *
 * @see Learn about Rich Text fields {@link https://prismic.io/docs/core-concepts/rich-text-title}
 * @see Learn about Rich Text serializers {@link https://prismic.io/docs/core-concepts/html-serializer}
 */
export declare function PrismicRichText<LinkResolverFunction extends prismic.LinkResolverFunction<any>>({ linkResolver, field, fallback, components, externalLinkComponent, internalLinkComponent, ...restProps }: PrismicRichTextProps<LinkResolverFunction>): JSX.Element | null;
