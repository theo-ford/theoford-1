import * as React from "react";
import { LinkField, LinkResolverFunction, PrismicDocument, AsLinkAttrsConfig } from "@prismicio/client";
/**
 * The default component rendered for internal and external links.
 */
export declare const defaultComponent = "a";
/**
 * Props provided to a component when rendered with `<PrismicLink>`.
 */
export interface LinkProps {
    /**
     * The URL to link.
     */
    href: string;
    /**
     * The `target` attribute for anchor elements. If the Prismic field is
     * configured to open in a new window, this prop defaults to `_blank`.
     */
    target?: React.HTMLAttributeAnchorTarget;
    /**
     * The `rel` attribute for anchor elements. If the `target` prop is set to
     * `"_blank"`, this prop defaults to `"noopener noreferrer"`.
     */
    rel?: string;
    /**
     * Children for the component. *
     */
    children?: React.ReactNode;
}
export type PrismicLinkProps<InternalComponentProps = React.ComponentProps<typeof defaultComponent>, ExternalComponentProps = React.ComponentProps<typeof defaultComponent>> = Omit<InternalComponentProps & ExternalComponentProps, "rel" | "href"> & {
    /**
     * The `rel` attribute for the link. By default, `"noreferrer"` is provided if
     * the link's URL is external. This prop can be provided a function to use the
     * link's metadata to determine the `rel` value.
     */
    rel?: string | AsLinkAttrsConfig["rel"];
    /**
     * The Link Resolver used to resolve links.
     *
     * @remarks
     * If your app uses Route Resolvers when querying for your Prismic
     * repository's content, a Link Resolver does not need to be provided.
     * @see Learn about Link Resolvers and Route Resolvers {@link https://prismic.io/docs/core-concepts/link-resolver-route-resolver}
     */
    linkResolver?: LinkResolverFunction;
    /**
     * The component rendered for internal URLs. Defaults to `<a>`.
     *
     * If your app uses a client-side router that requires a special Link
     * component, provide the Link component to this prop.
     */
    internalComponent?: React.ElementType<InternalComponentProps>;
    /**
     * The component rendered for external URLs. Defaults to `<a>`.
     */
    externalComponent?: React.ComponentType<ExternalComponentProps>;
} & ({
    document: PrismicDocument | null | undefined;
    href?: never;
    field?: never;
} | {
    field: LinkField | null | undefined;
    href?: never;
    document?: never;
} | {
    href: LinkProps["href"];
    field?: LinkField | null | undefined;
    document?: never;
});
export declare const PrismicLink: <InternalComponentProps = React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>, ExternalComponentProps = React.DetailedHTMLProps<React.AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>>(props: PrismicLinkProps<InternalComponentProps, ExternalComponentProps> & {
    ref?: React.ForwardedRef<Element> | undefined;
}) => JSX.Element;
