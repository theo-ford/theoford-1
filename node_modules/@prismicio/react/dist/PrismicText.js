import { jsx, Fragment } from "react/jsx-runtime";
import * as React from "react";
import { devMsg } from "./lib/devMsg.js";
import { richText } from './_node_modules/@prismicio/client/dist/helpers/isFilled.js';
import { asText } from './_node_modules/@prismicio/client/dist/helpers/asText.js';
const PrismicText = (props) => {
  if (typeof process !== "undefined" && process.env.NODE_ENV === "development") {
    if ("className" in props) {
      console.warn(`[PrismicText] className cannot be passed to <PrismicText> since it renders plain text without a wrapping component. For more details, see ${devMsg("classname-is-not-a-valid-prop")}.`, props.field);
    }
    if (typeof props.field === "string") {
      throw new Error(`[PrismicText] The "field" prop only accepts a Rich Text or Title field's value but was provided a different type of field instead (e.g. a Key Text or Select field). You can resolve this error by rendering the field value inline without <PrismicText>. For more details, see ${devMsg("prismictext-works-only-with-rich-text-and-title-fields")}`);
    }
  }
  return React.useMemo(() => {
    if (richText(props.field)) {
      const text = asText(props.field, props.separator);
      return /* @__PURE__ */ jsx(Fragment, { children: text });
    } else {
      return props.fallback != null ? /* @__PURE__ */ jsx(Fragment, { children: props.fallback }) : null;
    }
  }, [props.field, props.fallback, props.separator]);
};
export {
  PrismicText
};
//# sourceMappingURL=PrismicText.js.map
