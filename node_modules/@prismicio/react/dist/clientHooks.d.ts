import type * as prismic from "@prismicio/client";
import { ClientHookReturnType, HookOnlyParameters } from "./useStatefulPrismicClientMethod";
/**
 * A hook that queries content from the Prismic repository.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.get}
 */
export declare const usePrismicDocuments: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<prismic.Query<TDocument>>;
/**
 * A hook that queries content from the Prismic repository and returns only the
 * first result, if any.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getFirst}
 */
export declare const useFirstPrismicDocument: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument>;
/**
 * A hook that queries content from the Prismic repository and returns all
 * matching content. If no predicates are provided, all documents will be
 * fetched.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAll}
 */
export declare const useAllPrismicDocumentsDangerously: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(params?: (Partial<Omit<prismic.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries a document from the Prismic repository with a specific
 * ID.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param id - ID of the document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByID}
 */
export declare const usePrismicDocumentByID: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(id: string, params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument>;
/**
 * A hook that queries documents from the Prismic repository with specific IDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param ids - A list of document IDs
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByIDs}
 */
export declare const usePrismicDocumentsByIDs: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(id: string[], params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<prismic.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository with specific
 * IDs.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param ids - A list of document IDs
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAllByIDs}
 */
export declare const useAllPrismicDocumentsByIDs: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(id: string[], params?: (Partial<prismic.BuildQueryURLArgs> & {
    limit?: number | undefined;
} & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries a document from the Prismic repository with a specific
 * UID and Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uid - UID of the document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByUID}
 */
export declare const usePrismicDocumentByUID: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(documentType: any, uid: string, params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument>;
/**
 * A hook that queries documents from the Prismic repository with specific UIDs
 * of a Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uids - A list of document UIDs.
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByUID}
 */
export declare const usePrismicDocumentsByUIDs: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(documentType: any, uids: string[], params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<prismic.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository with specific
 * UIDs of a Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the document's Custom Type
 * @param uids - A list of document UIDs.
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByUID}
 */
export declare const useAllPrismicDocumentsByUIDs: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(documentType: any, uids: string[], params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries a singleton document from the Prismic repository for a
 * specific Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of the Prismic document returned
 *
 * @param documentType - The API ID of the singleton Custom Type
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getSingle}
 */
export declare const useSinglePrismicDocument: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(documentType: any, params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument>;
/**
 * A hook that queries documents from the Prismic repository for a specific
 * Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the Custom Type
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByType}
 */
export declare const usePrismicDocumentsByType: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(documentType: any, params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<prismic.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository for a specific
 * Custom Type.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param documentType - The API ID of the Custom Type
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAllByType}
 */
export declare const useAllPrismicDocumentsByType: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(documentType: any, params?: (Partial<Omit<prismic.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries documents from the Prismic repository with a specific
 * tag.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tag - The tag that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByTag}
 */
export declare const usePrismicDocumentsByTag: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(tag: string, params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<prismic.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository with a specific
 * tag.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tag - The tag that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAllByTag}
 */
export declare const useAllPrismicDocumentsByTag: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(tag: string, params?: (Partial<Omit<prismic.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries documents from the Prismic repository with specific tags.
 * A document must be tagged with at least one of the queried tags to be
 * included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByTags}
 */
export declare const usePrismicDocumentsBySomeTags: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(tag: string[], params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<prismic.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository with specific
 * tags. A document must be tagged with at least one of the queried tags to be
 * included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAllByTags}
 */
export declare const useAllPrismicDocumentsBySomeTags: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(tag: string[], params?: (Partial<Omit<prismic.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
/**
 * A hook that queries documents from the Prismic repository with specific tags.
 * A document must be tagged with all of the queried tags to be included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter, sort, and paginate results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getByTags}
 */
export declare const usePrismicDocumentsByEveryTag: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(tag: string[], params?: (Partial<prismic.BuildQueryURLArgs> & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<prismic.Query<TDocument>>;
/**
 * A hook that queries all documents from the Prismic repository with specific
 * tags. A document must be tagged with all of the queried tags to be included.
 *
 * @remarks
 * An additional `@prismicio/client` instance can be provided at
 * `params.client`.
 * @typeParam TDocument - Type of Prismic documents returned
 *
 * @param tags - A list of tags that must be included on a document
 * @param params - Parameters to filter and sort results
 *
 * @returns The composable payload {@link ClientHookReturnType}
 *
 * @see Underlying `@prismicio/client` method {@link proto.getAllByTags}
 */
export declare const useAllPrismicDocumentsByEveryTag: <TDocument extends prismic.PrismicDocument<Record<string, any>, string, string>>(tag: string[], params?: (Partial<Omit<prismic.BuildQueryURLArgs, "page">> & {
    limit?: number | undefined;
} & {
    fetchOptions?: prismic.RequestInitLike | undefined;
    signal?: any;
} & HookOnlyParameters) | undefined) => ClientHookReturnType<TDocument[]>;
