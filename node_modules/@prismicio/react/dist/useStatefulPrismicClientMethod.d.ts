import type * as prismic from "@prismicio/client";
import { PrismicClientHookState } from "./types";
type StateMachineState<TData> = {
    state: PrismicClientHookState;
    data?: TData;
    error?: Error;
};
type UnwrapPromise<T> = T extends Promise<infer U> ? U : T;
type ClientPrototype = typeof prismic.Client.prototype;
type ClientMethod<MethodName extends keyof ClientPrototype> = ClientPrototype[MethodName] extends (...args: any[]) => any ? ClientPrototype[MethodName] : never;
export type ClientMethodParameters<MethodName extends keyof ClientPrototype> = Parameters<ClientMethod<MethodName>>;
export type HookOnlyParameters = {
    client?: prismic.Client;
    skip?: boolean;
};
/**
 * The return value of a `@prismicio/client` React hook.
 *
 * @typeParam TData - Data returned by the client.
 */
export type ClientHookReturnType<TData = unknown> = [
    /**
     * Data returned by the client.
     */
    data: TData | undefined,
    /**
     * The current state of the hook's client method call.
     */
    state: Pick<StateMachineState<TData>, "state" | "error">
];
/**
 * Creates a React hook that forwards arguments to a specific method of a
 * `@prismicio/client` instance. The created hook has its own internal state
 * manager to report async status, such as pending or error statuses.
 *
 * @param methodName - The `@prismicio/client` method to which hook arguments
 *   will be forwarded.
 *
 * @returns A new React hook configured for the provided method.
 *
 * @internal
 */
export declare const useStatefulPrismicClientMethod: <TMethodName extends "fetchFn" | "get" | "getFirst" | "dangerouslyGetAll" | "getByID" | "getByIDs" | "getAllByIDs" | "getByUID" | "getByUIDs" | "getAllByUIDs" | "getSingle" | "getByType" | "getAllByType" | "getByTag" | "getAllByTag" | "getByEveryTag" | "getAllByEveryTag" | "getBySomeTags" | "getAllBySomeTags" | "getRepository" | "getRefs" | "getRefByID" | "getRefByLabel" | "getMasterRef" | "getReleases" | "getReleaseByID" | "getReleaseByLabel" | "getTags" | "buildQueryURL" | "resolvePreviewURL" | "graphQLFetch", TArgs extends Parameters<ClientMethod<TMethodName>>, TData extends UnwrapPromise<ReturnType<ClientMethod<TMethodName>>>>(methodName: TMethodName, args: TArgs, explicitClient?: prismic.Client) => ClientHookReturnType<TData>;
export {};
