import { jsx } from "react/jsx-runtime";
import * as React from "react";
import { getActiveRepositoryName } from "./lib/getActiveRepositoryName.js";
import { getComponentDisplayName } from "./lib/getComponentDisplayName.js";
import { useMergePrismicPreviewData } from "./useMergePrismicPreviewData.js";
import { usePrismicPreviewStore } from "./usePrismicPreviewStore.js";
const withPrismicPreview = (WrappedComponent) => {
  const WithPrismicPreview = (props) => {
    const isBootstrapped = usePrismicPreviewStore((state) => state.isBootstrapped);
    const [isPrismicPreview, setIsPrismicPreview] = React.useState(null);
    const mergedData = useMergePrismicPreviewData(props.data);
    React.useEffect(() => {
      const abortController = new AbortController();
      if (!isBootstrapped) {
        const repositoryName = getActiveRepositoryName();
        setIsPrismicPreview(!!repositoryName);
        if (repositoryName) {
          import("./lib/bootstrapPrismicPreview.js").then((mod) => mod.default(repositoryName, abortController));
        }
      }
      return () => abortController.abort();
    }, [isBootstrapped]);
    return /* @__PURE__ */ jsx(WrappedComponent, { ...props, data: mergedData, originalData: props.data, isPrismicPreview });
  };
  if (process.env.NODE_ENV === "development") {
    const wrappedComponentName = getComponentDisplayName(WrappedComponent);
    WithPrismicPreview.displayName = `withPrismicPreview(${wrappedComponentName})`;
  }
  return WithPrismicPreview;
};
export {
  withPrismicPreview
};
//# sourceMappingURL=withPrismicPreview.js.map
