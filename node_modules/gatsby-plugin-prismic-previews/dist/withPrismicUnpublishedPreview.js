import { jsx } from "react/jsx-runtime";
import * as React from "react";
import { getActiveRepositoryName } from "./lib/getActiveRepositoryName.js";
import { getComponentDisplayName } from "./lib/getComponentDisplayName.js";
const withPrismicUnpublishedPreview = (WrappedComponent) => {
  const WithPrismicUnpublishedPreview = (props) => {
    var _a;
    const [unpublishedData, setUnpublishedData] = React.useState({});
    const ResolvedComponent = unpublishedData.component || WrappedComponent;
    const data = React.useMemo(() => ({ ...props.data, ...unpublishedData.data }), [props.data, unpublishedData.data]);
    React.useEffect(() => {
      const abortController = new AbortController();
      const repositoryName = getActiveRepositoryName();
      if (repositoryName) {
        Promise.all([
          import("./lib/bootstrapPrismicPreview.js"),
          import("./lib/resolveUnpublishedPrismicPreview.js")
        ]).then(([bootstrap, resolve]) => bootstrap.default(repositoryName, abortController).then(() => {
          var _a2;
          return resolve.default(repositoryName, abortController, setUnpublishedData, (_a2 = props.location) == null ? void 0 : _a2.pathname);
        }));
      }
      return () => abortController.abort();
    }, [(_a = props.location) == null ? void 0 : _a.pathname]);
    return /* @__PURE__ */ jsx(ResolvedComponent, { ...props, data });
  };
  if (process.env.NODE_ENV === "development") {
    const wrappedComponentName = getComponentDisplayName(WrappedComponent);
    WithPrismicUnpublishedPreview.displayName = `withPrismicUnpublishedPreview(${wrappedComponentName})`;
  }
  return WithPrismicUnpublishedPreview;
};
export {
  withPrismicUnpublishedPreview
};
//# sourceMappingURL=withPrismicUnpublishedPreview.js.map
