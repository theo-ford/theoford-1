import * as React from "react";
import { getDocument } from "./lib/getDocument.js";
import { hasOwnProperty } from "./lib/hasOwnProperty.js";
import { usePrismicPreviewStore } from "./usePrismicPreviewStore.js";
const mergePreviewData = ({ staticDataNode, publishedDocumentIDs }) => {
  const castedData = staticDataNode;
  if (typeof castedData === "object" && castedData !== null && !Array.isArray(castedData)) {
    if (hasOwnProperty(castedData, "_previewable")) {
      const replacement = getDocument(castedData._previewable);
      if (replacement) {
        return replacement;
      } else {
        if (publishedDocumentIDs.length > 0 && !publishedDocumentIDs.includes(castedData._previewable)) {
          return null;
        } else {
          return staticDataNode;
        }
      }
    } else {
      const newNode = {};
      for (const key in castedData) {
        newNode[key] = mergePreviewData({
          staticDataNode: castedData[key],
          publishedDocumentIDs
        });
      }
      return newNode;
    }
  } else if (Array.isArray(staticDataNode)) {
    return staticDataNode.map((element) => {
      return mergePreviewData({
        staticDataNode: element,
        publishedDocumentIDs
      });
    });
  } else {
    return staticDataNode;
  }
};
const useMergePrismicPreviewData = (staticData) => {
  const isBootstrapped = usePrismicPreviewStore((state) => state.isBootstrapped);
  const publishedDocumentIDs = usePrismicPreviewStore((state) => state.publishedDocumentIDs);
  const documents = usePrismicPreviewStore((state) => state.documents);
  return React.useMemo(() => {
    if (staticData) {
      const hasPreviewData = publishedDocumentIDs.length > 0 || Object.keys(documents).length > 0;
      if (isBootstrapped && hasPreviewData) {
        return mergePreviewData({
          staticDataNode: staticData,
          publishedDocumentIDs
        });
      } else {
        return staticData;
      }
    }
  }, [documents, publishedDocumentIDs, isBootstrapped, staticData]);
};
export {
  useMergePrismicPreviewData
};
//# sourceMappingURL=useMergePrismicPreviewData.js.map
