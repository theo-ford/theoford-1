import { jsx } from "react/jsx-runtime";
import * as React from "react";
import { getActiveRepositoryName } from "./lib/getActiveRepositoryName.js";
import { getComponentDisplayName } from "./lib/getComponentDisplayName.js";
const withPrismicPreviewResolver = (WrappedComponent) => {
  const WithPrismicPreviewResolver = (props) => {
    const [isPrismicPreview, setIsPrismicPreview] = React.useState(null);
    React.useEffect(() => {
      const abortController = new AbortController();
      const repositoryName = getActiveRepositoryName();
      setIsPrismicPreview(!!repositoryName);
      if (repositoryName) {
        import("./lib/resolvePrismicPreview.js").then((mod) => mod.default(repositoryName, abortController));
      }
      return () => abortController.abort();
    }, []);
    return /* @__PURE__ */ jsx(WrappedComponent, { ...props, isPrismicPreview });
  };
  if (process.env.NODE_ENV === "development") {
    const wrappedComponentName = getComponentDisplayName(WrappedComponent);
    WithPrismicPreviewResolver.displayName = `withPrismicPreviewResolver(${wrappedComponentName})`;
  }
  return WithPrismicPreviewResolver;
};
export {
  withPrismicPreviewResolver
};
//# sourceMappingURL=withPrismicPreviewResolver.js.map
