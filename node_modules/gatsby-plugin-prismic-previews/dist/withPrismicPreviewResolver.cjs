"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const jsxRuntime = require("react/jsx-runtime");
const React = require("react");
const getActiveRepositoryName = require("./lib/getActiveRepositoryName.cjs");
const getComponentDisplayName = require("./lib/getComponentDisplayName.cjs");
const _interopNamespaceDefaultOnly = (e) => Object.freeze(Object.defineProperty({ __proto__: null, default: e }, Symbol.toStringTag, { value: "Module" }));
function _interopNamespaceDefault(e) {
  const n = Object.create(null, { [Symbol.toStringTag]: { value: "Module" } });
  if (e) {
    for (const k in e) {
      if (k !== "default") {
        const d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: () => e[k]
        });
      }
    }
  }
  n.default = e;
  return Object.freeze(n);
}
const React__namespace = /* @__PURE__ */ _interopNamespaceDefault(React);
const withPrismicPreviewResolver = (WrappedComponent) => {
  const WithPrismicPreviewResolver = (props) => {
    const [isPrismicPreview, setIsPrismicPreview] = React__namespace.useState(null);
    React__namespace.useEffect(() => {
      const abortController = new AbortController();
      const repositoryName = getActiveRepositoryName.getActiveRepositoryName();
      setIsPrismicPreview(!!repositoryName);
      if (repositoryName) {
        Promise.resolve().then(() => /* @__PURE__ */ _interopNamespaceDefaultOnly(require("./lib/resolvePrismicPreview.cjs"))).then((mod) => mod.default(repositoryName, abortController));
      }
      return () => abortController.abort();
    }, []);
    return /* @__PURE__ */ jsxRuntime.jsx(WrappedComponent, { ...props, isPrismicPreview });
  };
  if (process.env.NODE_ENV === "development") {
    const wrappedComponentName = getComponentDisplayName.getComponentDisplayName(WrappedComponent);
    WithPrismicPreviewResolver.displayName = `withPrismicPreviewResolver(${wrappedComponentName})`;
  }
  return WithPrismicPreviewResolver;
};
exports.withPrismicPreviewResolver = withPrismicPreviewResolver;
//# sourceMappingURL=withPrismicPreviewResolver.cjs.map
