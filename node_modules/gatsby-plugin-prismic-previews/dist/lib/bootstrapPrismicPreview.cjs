"use strict";
const gatsby = require("gatsby");
const usePrismicPreviewStore = require("../usePrismicPreviewStore.cjs");
const fetchLinkedDocuments = require("./fetchLinkedDocuments.cjs");
const fetchNewDocuments = require("./fetchNewDocuments.cjs");
const fetchPublishedDocumentIDs = require("./fetchPublishedDocumentIDs.cjs");
const fmtLog = require("./fmtLog.cjs");
const getClient = require("./getClient.cjs");
const getPluginOptions = require("./getPluginOptions.cjs");
const getRepositoryConfig = require("./getRepositoryConfig.cjs");
const normalizeDocument = require("./normalizeDocument.cjs");
const bootstrapPrismicPreview = async (repositoryName, abortController) => {
  const state = usePrismicPreviewStore.usePrismicPreviewStore.getState();
  if (state.isBootstrapped) {
    return;
  }
  const pluginOptions = getPluginOptions.getPluginOptions(repositoryName);
  if (!pluginOptions) {
    console.error(fmtLog.fmtLog(repositoryName, `Plugin options could not be found. Did you add "gatsby-plugin-prismic-previews" for this repository to your app's "gatsby-config.js" file?`));
    return;
  }
  const repositoryConfig = getRepositoryConfig.getRepositoryConfig(repositoryName);
  if (!repositoryConfig) {
    console.error(fmtLog.fmtLog(repositoryName, 'Repository configuration could not be found. Did you add <PrismicPreviewProvider> to your "gatsby-browser.js" and "gatsby-ssr.js"? It must contain a repository configuration object for this repository.'));
    return;
  }
  const client = getClient.getClient(pluginOptions);
  const signal = abortController.signal;
  await client.getCachedRepository();
  const [localPublishedDocumentIDs, newDocuments] = await Promise.all([
    fetchPublishedDocumentIDs.fetchPublishedDocumentIDs({
      client,
      abortController,
      pluginOptions
    }),
    fetchNewDocuments.fetchNewDocuments({ client, abortController })
  ]);
  if (localPublishedDocumentIDs.length) {
    state.setPublishedDocumentIDs(localPublishedDocumentIDs);
  }
  const modelsRaw = await fetch(gatsby.withAssetPrefix(__PUBLIC_MODELS_PATH__), {
    signal
  });
  const models = await modelsRaw.json();
  const modelsForRepository = models[pluginOptions.repositoryName];
  await Promise.all([
    fetchLinkedDocuments.fetchLinkedDocuments(newDocuments, client, pluginOptions, repositoryConfig, modelsForRepository.customTypeModels, modelsForRepository.sharedSliceModels, abortController),
    Promise.all(newDocuments.map(async (doc) => {
      const model = modelsForRepository.customTypeModels.find((model2) => model2.id === doc.type);
      if (model) {
        const normalizedDocument = await normalizeDocument.normalizeDocument(doc, model, modelsForRepository.sharedSliceModels, repositoryConfig, pluginOptions);
        state.addDocument(normalizedDocument);
      }
    }))
  ]);
  state.setIsBootstrapped(true);
};
module.exports = bootstrapPrismicPreview;
//# sourceMappingURL=bootstrapPrismicPreview.cjs.map
