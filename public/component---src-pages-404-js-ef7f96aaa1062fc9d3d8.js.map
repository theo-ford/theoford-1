{"version":3,"file":"component---src-pages-404-js-ef7f96aaa1062fc9d3d8.js","mappings":"kOAaA,ICLCA,EDKD,GCLCA,EDFoBC,IACnBC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,UAAI,oBAOMC,EAAAA,QCL0BC,IAA8B,MACpE,MAAOC,EAAiBC,GAAsBJ,EAAAA,SAG3C,CAAC,GAEEK,EAAoBF,EAAgBG,WAAaR,EAEjDS,EAAOP,EAAAA,SACZ,SAAYE,EAAMK,QAASJ,EAAgBI,QAC3C,CAACL,EAAMK,KAAMJ,EAAgBI,OA6B9B,OA1BAP,EAAAA,WAAgB,KACT,MAAAQ,EAAkB,IAAIC,gBAEtBC,GAAiBC,EAAAA,EAAAA,KAoBhB,OAlBHD,GACHE,QAAQC,IAAI,CACX,oDACA,gCACEC,MAAKC,IAAA,IAAEC,EAAWC,GAAOF,EAAA,OAC3BC,EACEE,QAAQR,EAAgBF,GACxBM,MAAK,WACL,OAAAG,EAAQC,QACPR,EACAF,EACAJ,EACA,OAAAe,EAAAjB,EAAMkB,eAAN,EAAAD,EAAgBE,SAAQ,GAEzB,IAIG,IAAMb,EAAgBc,OAAA,GAC3B,CAAC,OAAAC,EAAArB,EAAMkB,eAAN,EAAAG,EAAgBF,YAEZG,EAAAA,EAAAA,KAAAnB,EAAA,IAAsBH,EAAOK,QAAW,E","sources":["webpack://studio-prismic-starter/./src/pages/404.js","webpack://studio-prismic-starter/../../src/withPrismicUnpublishedPreview.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { withPrismicUnpublishedPreview } from \"gatsby-plugin-prismic-previews\";\n\nimport Index from \"./index\";\n// import Template from \"../templates/template\";\n\nconst NotFoundPage = () => (\n  <>\n    <h1>Page not found!</h1>\n  </>\n);\n\n// If an unpublished `page` document is previewed, PageTemplate will be rendered.\nexport default withPrismicUnpublishedPreview(NotFoundPage, {\n  templateMap: {\n    homepage: Index,\n  },\n});\n","import * as React from \"react\";\n\nimport { getActiveRepositoryName } from \"./lib/getActiveRepositoryName\";\nimport { getComponentDisplayName } from \"./lib/getComponentDisplayName\";\n\nimport type { NormalizedDocument, PagePropsLike } from \"./types\";\n\nexport const withPrismicUnpublishedPreview = <TProps extends PagePropsLike>(\n\tWrappedComponent: React.ComponentType<TProps>,\n): React.ComponentType<TProps> => {\n\tconst WithPrismicUnpublishedPreview = (props: TProps): JSX.Element => {\n\t\tconst [unpublishedData, setUnpublishedData] = React.useState<{\n\t\t\tdata?: { [key: string]: NormalizedDocument };\n\t\t\tcomponent?: React.ComponentType<TProps>;\n\t\t}>({});\n\n\t\tconst ResolvedComponent = unpublishedData.component || WrappedComponent;\n\n\t\tconst data = React.useMemo(\n\t\t\t() => ({ ...props.data, ...unpublishedData.data }),\n\t\t\t[props.data, unpublishedData.data],\n\t\t);\n\n\t\tReact.useEffect(() => {\n\t\t\tconst abortController = new AbortController();\n\n\t\t\tconst repositoryName = getActiveRepositoryName();\n\n\t\t\tif (repositoryName) {\n\t\t\t\tPromise.all([\n\t\t\t\t\timport(\"./lib/bootstrapPrismicPreview\"),\n\t\t\t\t\timport(\"./lib/resolveUnpublishedPrismicPreview\"),\n\t\t\t\t]).then(([bootstrap, resolve]) =>\n\t\t\t\t\tbootstrap\n\t\t\t\t\t\t.default(repositoryName, abortController)\n\t\t\t\t\t\t.then(() =>\n\t\t\t\t\t\t\tresolve.default(\n\t\t\t\t\t\t\t\trepositoryName,\n\t\t\t\t\t\t\t\tabortController,\n\t\t\t\t\t\t\t\tsetUnpublishedData,\n\t\t\t\t\t\t\t\tprops.location?.pathname,\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn () => abortController.abort();\n\t\t}, [props.location?.pathname]);\n\n\t\treturn <ResolvedComponent {...props} data={data} />;\n\t};\n\n\tif (process.env.NODE_ENV === \"development\") {\n\t\tconst wrappedComponentName = getComponentDisplayName(WrappedComponent);\n\t\tWithPrismicUnpublishedPreview.displayName = `withPrismicUnpublishedPreview(${wrappedComponentName})`;\n\t}\n\n\treturn WithPrismicUnpublishedPreview;\n};\n"],"names":["WrappedComponent","NotFoundPage","React","Index","props","unpublishedData","setUnpublishedData","ResolvedComponent","component","data","abortController","AbortController","repositoryName","getActiveRepositoryName","Promise","all","then","_ref","bootstrap","resolve","default","_a2","location","pathname","abort","_a","jsx"],"sourceRoot":""}