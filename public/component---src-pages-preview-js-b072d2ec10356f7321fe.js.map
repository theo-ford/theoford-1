{"version":3,"file":"component---src-pages-preview-js-b072d2ec10356f7321fe.js","mappings":"mLAEO,MAAMA,EAA0BA,KACtC,MAAO,CAAEC,GACRC,oBAAmBC,EAAAA,EAAAA,MAAsB,IAAIC,MAC5C,0DACI,GAEC,OAAAH,CAAA,C,uDCRR,MAAMI,EAAaC,GACXA,EAAMC,QAAQ,OAAQ,KAQjBJ,EAAmBA,KAC/B,MAAMK,EAAUC,SAASC,OAAOC,MAAM,MAEtC,UAAWD,KAAUF,EAAS,CACvB,MAAAI,EAAQF,EAAOC,MAAM,KAO3B,GAAiB,uBANAN,EAAUO,EAAM,IAAIL,QAAQ,OAAQ,KAMd,CACtC,MAAMD,EAAQM,EAAMC,MAAM,GAAGC,KAAK,KAElC,OAAOT,EAAUC,EACjB,CACD,E,sGCXF,ICJCS,EDID,GCJCA,EDPmBC,IAA+B,IAA9B,UAAEC,EAAS,UAAEC,GAAWF,EAC3C,OAAkB,IAAdC,EAA4B,iBAG9BE,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAG,WACF,ECG8BC,IACnC,MAAOC,EAAkBC,GAAuBH,EAAAA,SAE9C,MAiBF,OAfAA,EAAAA,WAAgB,KACT,MAAAI,EAAkB,IAAIC,gBAEtBvB,GAAiBD,EAAAA,EAAAA,KAShB,OARasB,IAAErB,GAElBA,GACI,qDAA+BwB,MAAMC,GAC3CA,EAAIC,QAAQ1B,EAAgBsB,KAIvB,IAAMA,EAAgBK,OAAA,GAC3B,KAEKC,EAAAA,EAAAA,KAAAd,EAAA,IAAqBK,EAAOC,oBAAmC,E","sources":["webpack://studio-prismic-starter/../../../src/lib/getActiveRepositoryName.ts","webpack://studio-prismic-starter/../../../src/lib/getPreviewCookie.ts","webpack://studio-prismic-starter/./src/pages/preview.js","webpack://studio-prismic-starter/../../src/withPrismicPreviewResolver.tsx"],"sourcesContent":["import { getPreviewCookie } from \"./getPreviewCookie\";\n\nexport const getActiveRepositoryName = (): string | undefined => {\n\tconst [, repositoryName] =\n\t\tdecodeURIComponent(getPreviewCookie() || \"\").match(\n\t\t\t/\"([a-zA-Z0-9][-a-zA-Z0-9]{2,}[a-zA-Z0-9]).prismic.io\"/,\n\t\t) || [];\n\n\treturn repositoryName;\n};\n","const readValue = (value: string): string => {\n\treturn value.replace(/%3B/g, \";\");\n};\n\n/**\n * Returns the value of a cookie from a given cookie store.\n *\n * @returns The value of the cookie, if it exists.\n */\nexport const getPreviewCookie = (): string | undefined => {\n\tconst cookies = document.cookie.split(\"; \");\n\n\tfor (const cookie of cookies) {\n\t\tconst parts = cookie.split(\"=\");\n\t\tconst thisName = readValue(parts[0]).replace(/%3D/g, \"=\");\n\n\t\t// The Prismic preview cookie name is hardcoded here to prevent\n\t\t// including `@prismicio/client` in the main \"app.js\" bundle.\n\t\t// Unfortunately, the package is not tree-shaken when only the\n\t\t// cookie name is imported.\n\t\tif (thisName === \"io.prismic.preview\") {\n\t\t\tconst value = parts.slice(1).join(\"=\");\n\n\t\t\treturn readValue(value);\n\t\t}\n\t}\n};\n","import * as React from \"react\";\nimport { withPrismicPreviewResolver } from \"gatsby-plugin-prismic-previews\";\n\nconst PreviewPage = ({ isPreview, isLoading }) => {\n  if (isPreview === false) return \"Not a preview!\";\n\n  return (\n    <>\n      <p>Loading</p>\n    </>\n  );\n};\n\n\nexport default withPrismicPreviewResolver(PreviewPage, {\n  repositoryName: `Martinez-2`,\n  // linkResolver: ({ node, key, value }) => (post) => `/${post.uid}`,\n});\n","import * as React from \"react\";\n\nimport { getActiveRepositoryName } from \"./lib/getActiveRepositoryName\";\nimport { getComponentDisplayName } from \"./lib/getComponentDisplayName\";\n\nexport type WithPrismicPreviewResolverProps = {\n\tisPrismicPreview: boolean;\n};\n\nexport const withPrismicPreviewResolver = <TProps,>(\n\tWrappedComponent: React.ComponentType<TProps>,\n): React.ComponentType<TProps> => {\n\tconst WithPrismicPreviewResolver = (props: TProps): JSX.Element => {\n\t\tconst [isPrismicPreview, setIsPrismicPreview] = React.useState<\n\t\t\tboolean | null\n\t\t>(null);\n\n\t\tReact.useEffect(() => {\n\t\t\tconst abortController = new AbortController();\n\n\t\t\tconst repositoryName = getActiveRepositoryName();\n\t\t\tsetIsPrismicPreview(!!repositoryName);\n\n\t\t\tif (repositoryName) {\n\t\t\t\timport(\"./lib/resolvePrismicPreview\").then((mod) =>\n\t\t\t\t\tmod.default(repositoryName, abortController),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn () => abortController.abort();\n\t\t}, []);\n\n\t\treturn <WrappedComponent {...props} isPrismicPreview={isPrismicPreview} />;\n\t};\n\n\tif (process.env.NODE_ENV === \"development\") {\n\t\tconst wrappedComponentName = getComponentDisplayName(WrappedComponent);\n\t\tWithPrismicPreviewResolver.displayName = `withPrismicPreviewResolver(${wrappedComponentName})`;\n\t}\n\n\treturn WithPrismicPreviewResolver;\n};\n"],"names":["getActiveRepositoryName","repositoryName","decodeURIComponent","getPreviewCookie","match","readValue","value","replace","cookies","document","cookie","split","parts","slice","join","WrappedComponent","_ref","isPreview","isLoading","React","props","isPrismicPreview","setIsPrismicPreview","abortController","AbortController","then","mod","default","abort","jsx"],"sourceRoot":""}