{"version":3,"file":"c8f7fe3b0e41be846d5687592cf2018ff6e22687-e5e7daee934d63faab85.js","mappings":"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","sources":["webpack://studio-prismic-starter/./node_modules/@prismicio/client/dist/types/model/types.js","webpack://studio-prismic-starter/./node_modules/@prismicio/client/dist/types/model/sliceZone.js","webpack://studio-prismic-starter/./node_modules/@prismicio/client/dist/helpers/isFilled.js","webpack://studio-prismic-starter/./node_modules/@prismicio/types/dist/value/richText.js","webpack://studio-prismic-starter/./node_modules/@prismicio/richtext/dist/types.js","webpack://studio-prismic-starter/./node_modules/@prismicio/richtext/dist/asTree.js","webpack://studio-prismic-starter/./node_modules/@prismicio/richtext/dist/serialize.js","webpack://studio-prismic-starter/./node_modules/@prismicio/client/dist/types/value/richText.js","webpack://studio-prismic-starter/./node_modules/@prismicio/client/dist/lib/escapeHTML.js","webpack://studio-prismic-starter/./node_modules/@prismicio/client/dist/lib/serializerHelpers.js","webpack://studio-prismic-starter/./node_modules/@prismicio/client/dist/helpers/asHTML.js","webpack://studio-prismic-starter/./node_modules/@prismicio/richtext/dist/wrapMapSerializer.js","webpack://studio-prismic-starter/../src/buildURL.ts","webpack://studio-prismic-starter/../../src/constants.ts","webpack://studio-prismic-starter/./node_modules/tslib/tslib.es6.js","webpack://studio-prismic-starter/./node_modules/lower-case/dist.es2015/index.js","webpack://studio-prismic-starter/./node_modules/no-case/dist.es2015/index.js","webpack://studio-prismic-starter/./node_modules/pascal-case/dist.es2015/index.js","webpack://studio-prismic-starter/../../../src/lib/pascalCase.ts","webpack://studio-prismic-starter/../../../src/lib/uuid.ts","webpack://studio-prismic-starter/../../../src/lib/normalizeDocument.ts","webpack://studio-prismic-starter/./node_modules/@prismicio/richtext/dist/composeSerializers.js","webpack://studio-prismic-starter/./node_modules/@prismicio/client/dist/helpers/asText.js","webpack://studio-prismic-starter/./node_modules/@prismicio/richtext/dist/asText.js","webpack://studio-prismic-starter/../../../src/lib/fetchLinkedDocuments.ts","webpack://studio-prismic-starter/../../../src/lib/isReleasePreview.ts","webpack://studio-prismic-starter/../../../src/lib/fetchNewDocuments.ts","webpack://studio-prismic-starter/./node_modules/@prismicio/client/dist/getGraphQLEndpoint.js","webpack://studio-prismic-starter/../../../src/lib/fetchPublishedDocumentIDs.ts","webpack://studio-prismic-starter/../../../src/lib/bootstrapPrismicPreview.ts"],"sourcesContent":["const CustomTypeModelFieldType = {\n  Boolean: \"Boolean\",\n  Color: \"Color\",\n  Date: \"Date\",\n  Embed: \"Embed\",\n  GeoPoint: \"GeoPoint\",\n  Group: \"Group\",\n  Image: \"Image\",\n  Integration: \"IntegrationFields\",\n  Link: \"Link\",\n  Number: \"Number\",\n  Select: \"Select\",\n  Slices: \"Slices\",\n  StructuredText: \"StructuredText\",\n  Text: \"Text\",\n  Timestamp: \"Timestamp\",\n  UID: \"UID\",\n  /**\n   * @deprecated - Renamed to `Integration`.\n   */\n  IntegrationFields: \"IntegrationFields\",\n  /**\n   * @deprecated - Legacy field type. Use `Number` instead.\n   */\n  Range: \"Range\",\n  /**\n   * @deprecated - Legacy field type. Do not use.\n   */\n  Separator: \"Separator\",\n  /**\n   * @deprecated - Legacy field type. Use `Slices` instead.\n   */\n  LegacySlices: \"Choice\"\n};\nexport {\n  CustomTypeModelFieldType\n};\n//# sourceMappingURL=types.js.map\n","const CustomTypeModelSliceType = {\n  Slice: \"Slice\",\n  SharedSlice: \"SharedSlice\"\n};\nexport {\n  CustomTypeModelSliceType\n};\n//# sourceMappingURL=sliceZone.js.map\n","const isNonNullish = (input) => {\n  return input != null;\n};\nconst isNonEmptyArray = (input) => {\n  return !!input.length;\n};\nconst richText = (field) => {\n  if (!isNonNullish(field)) {\n    return false;\n  } else if (field.length === 1 && \"text\" in field[0]) {\n    return !!field[0].text;\n  } else {\n    return !!field.length;\n  }\n};\nconst title = richText;\nconst imageThumbnail = (thumbnail) => {\n  return isNonNullish(thumbnail) && !!thumbnail.url;\n};\nconst image = imageThumbnail;\nconst link = (field) => {\n  return isNonNullish(field) && (\"id\" in field || \"url\" in field);\n};\nconst linkToMedia = link;\nconst contentRelationship = link;\nconst date = isNonNullish;\nconst timestamp = isNonNullish;\nconst color = isNonNullish;\nconst number = isNonNullish;\nconst keyText = (field) => {\n  return isNonNullish(keyText) && !!field;\n};\nconst select = isNonNullish;\nconst embed = (field) => {\n  return isNonNullish(field) && !!field.embed_url;\n};\nconst geoPoint = (field) => {\n  return isNonNullish(field) && \"longitude\" in field;\n};\nconst integrationField = isNonNullish;\nconst integrationFields = integrationField;\nconst group = (group2) => {\n  return isNonNullish(group2) && isNonEmptyArray(group2);\n};\nconst sliceZone = (slices) => {\n  return isNonNullish(slices) && isNonEmptyArray(slices);\n};\nexport {\n  color,\n  contentRelationship,\n  date,\n  embed,\n  geoPoint,\n  group,\n  image,\n  imageThumbnail,\n  integrationField,\n  integrationFields,\n  keyText,\n  link,\n  linkToMedia,\n  number,\n  richText,\n  select,\n  sliceZone,\n  timestamp,\n  title\n};\n//# sourceMappingURL=isFilled.js.map\n","const RichTextNodeType = {\n  heading1: \"heading1\",\n  heading2: \"heading2\",\n  heading3: \"heading3\",\n  heading4: \"heading4\",\n  heading5: \"heading5\",\n  heading6: \"heading6\",\n  paragraph: \"paragraph\",\n  preformatted: \"preformatted\",\n  strong: \"strong\",\n  em: \"em\",\n  listItem: \"list-item\",\n  oListItem: \"o-list-item\",\n  list: \"group-list-item\",\n  oList: \"group-o-list-item\",\n  image: \"image\",\n  embed: \"embed\",\n  hyperlink: \"hyperlink\",\n  label: \"label\",\n  span: \"span\"\n};\nexport {\n  RichTextNodeType\n};\n//# sourceMappingURL=richText.js.map\n","import { RichTextNodeType } from \"@prismicio/types\";\nconst RichTextReversedNodeType = {\n  [RichTextNodeType.listItem]: \"listItem\",\n  [RichTextNodeType.oListItem]: \"oListItem\",\n  [RichTextNodeType.list]: \"list\",\n  [RichTextNodeType.oList]: \"oList\"\n};\nexport {\n  RichTextReversedNodeType\n};\n//# sourceMappingURL=types.js.map\n","import { RichTextNodeType } from \"@prismicio/types\";\nconst uuid = () => {\n  return (++uuid.i).toString();\n};\nuuid.i = 0;\nconst asTree = (nodes) => {\n  const preparedNodes = prepareNodes(nodes);\n  const children = [];\n  for (let i = 0; i < preparedNodes.length; i++) {\n    children.push(nodeToTreeNode(preparedNodes[i]));\n  }\n  return {\n    key: uuid(),\n    children\n  };\n};\nconst createTreeNode = (node, children = []) => {\n  return {\n    key: uuid(),\n    type: node.type,\n    text: \"text\" in node ? node.text : void 0,\n    node,\n    children\n  };\n};\nconst createTextTreeNode = (text) => {\n  return createTreeNode({\n    type: RichTextNodeType.span,\n    text,\n    spans: []\n  });\n};\nconst prepareNodes = (nodes) => {\n  const mutNodes = nodes.slice(0);\n  for (let i = 0; i < mutNodes.length; i++) {\n    const node = mutNodes[i];\n    if (node.type === RichTextNodeType.listItem || node.type === RichTextNodeType.oListItem) {\n      const items = [\n        node\n      ];\n      while (mutNodes[i + 1] && mutNodes[i + 1].type === node.type) {\n        items.push(mutNodes[i + 1]);\n        mutNodes.splice(i, 1);\n      }\n      if (node.type === RichTextNodeType.listItem) {\n        mutNodes[i] = {\n          type: RichTextNodeType.list,\n          items\n        };\n      } else {\n        mutNodes[i] = {\n          type: RichTextNodeType.oList,\n          items\n        };\n      }\n    }\n  }\n  return mutNodes;\n};\nconst nodeToTreeNode = (node) => {\n  if (\"text\" in node) {\n    return createTreeNode(node, textNodeSpansToTreeNodeChildren(node.spans, node));\n  }\n  if (\"items\" in node) {\n    const children = [];\n    for (let i = 0; i < node.items.length; i++) {\n      children.push(nodeToTreeNode(node.items[i]));\n    }\n    return createTreeNode(node, children);\n  }\n  return createTreeNode(node);\n};\nconst textNodeSpansToTreeNodeChildren = (spans, node, parentSpan) => {\n  if (!spans.length) {\n    return [createTextTreeNode(node.text)];\n  }\n  const mutSpans = spans.slice(0);\n  mutSpans.sort((a, b) => a.start - b.start || b.end - a.end);\n  const children = [];\n  for (let i = 0; i < mutSpans.length; i++) {\n    const span = mutSpans[i];\n    const parentSpanStart = parentSpan && parentSpan.start || 0;\n    const spanStart = span.start - parentSpanStart;\n    const spanEnd = span.end - parentSpanStart;\n    const text = node.text.slice(spanStart, spanEnd);\n    const childSpans = [];\n    for (let j = i; j < mutSpans.length; j++) {\n      const siblingSpan = mutSpans[j];\n      if (siblingSpan !== span) {\n        if (siblingSpan.start >= span.start && siblingSpan.end <= span.end) {\n          childSpans.push(siblingSpan);\n          mutSpans.splice(j, 1);\n          j--;\n        } else if (siblingSpan.start < span.end && siblingSpan.end > span.start) {\n          childSpans.push({\n            ...siblingSpan,\n            end: span.end\n          });\n          mutSpans[j] = {\n            ...siblingSpan,\n            start: span.end\n          };\n        }\n      }\n    }\n    if (i === 0 && spanStart > 0) {\n      children.push(createTextTreeNode(node.text.slice(0, spanStart)));\n    }\n    const spanWithText = { ...span, text };\n    children.push(createTreeNode(spanWithText, textNodeSpansToTreeNodeChildren(childSpans, {\n      ...node,\n      text\n    }, span)));\n    if (spanEnd < node.text.length) {\n      children.push(createTextTreeNode(node.text.slice(spanEnd, mutSpans[i + 1] ? mutSpans[i + 1].start - parentSpanStart : void 0)));\n    }\n  }\n  return children;\n};\nexport {\n  asTree\n};\n//# sourceMappingURL=asTree.js.map\n","import { asTree } from \"./asTree.js\";\nconst serialize = (richTextField, serializer) => {\n  return serializeTreeNodes(asTree(richTextField).children, serializer);\n};\nconst serializeTreeNodes = (nodes, serializer) => {\n  const serializedTreeNodes = [];\n  for (let i = 0; i < nodes.length; i++) {\n    const treeNode = nodes[i];\n    const serializedTreeNode = serializer(treeNode.type, treeNode.node, treeNode.text, serializeTreeNodes(treeNode.children, serializer), treeNode.key);\n    if (serializedTreeNode != null) {\n      serializedTreeNodes.push(serializedTreeNode);\n    }\n  }\n  return serializedTreeNodes;\n};\nexport {\n  serialize\n};\n//# sourceMappingURL=serialize.js.map\n","const RichTextNodeType = {\n  heading1: \"heading1\",\n  heading2: \"heading2\",\n  heading3: \"heading3\",\n  heading4: \"heading4\",\n  heading5: \"heading5\",\n  heading6: \"heading6\",\n  paragraph: \"paragraph\",\n  preformatted: \"preformatted\",\n  strong: \"strong\",\n  em: \"em\",\n  listItem: \"list-item\",\n  oListItem: \"o-list-item\",\n  list: \"group-list-item\",\n  oList: \"group-o-list-item\",\n  image: \"image\",\n  embed: \"embed\",\n  hyperlink: \"hyperlink\",\n  label: \"label\",\n  span: \"span\"\n};\nexport {\n  RichTextNodeType\n};\n//# sourceMappingURL=richText.js.map\n","const matchHtmlRegExp = /[\"'&<>]/;\nconst escapeHTML = (string) => {\n  const str = \"\" + string;\n  const match = matchHtmlRegExp.exec(str);\n  if (!match) {\n    return str;\n  }\n  let escape;\n  let html = \"\";\n  let index = 0;\n  let lastIndex = 0;\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        escape = \"&quot;\";\n        break;\n      case 38:\n        escape = \"&amp;\";\n        break;\n      case 39:\n        escape = \"&#39;\";\n        break;\n      case 60:\n        escape = \"&lt;\";\n        break;\n      case 62:\n        escape = \"&gt;\";\n        break;\n      default:\n        continue;\n    }\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n    lastIndex = index + 1;\n    html += escape;\n  }\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n};\nexport {\n  escapeHTML\n};\n//# sourceMappingURL=escapeHTML.js.map\n","import { LinkType } from \"../types/value/link.js\";\nimport { RichTextNodeType } from \"../types/value/richText.js\";\nimport { asLink } from \"../helpers/asLink.js\";\nimport { escapeHTML } from \"./escapeHTML.js\";\nconst getLabel = (node) => {\n  return \"data\" in node && \"label\" in node.data ? ` class=\"${node.data.label}\"` : \"\";\n};\nconst serializeStandardTag = (tag, node, children) => {\n  return `<${tag}${getLabel(node)}>${children.join(\"\")}</${tag}>`;\n};\nconst serializePreFormatted = (node) => {\n  return `<pre${getLabel(node)}>${escapeHTML(node.text)}</pre>`;\n};\nconst serializeImage = (linkResolver, node) => {\n  let imageTag = `<img src=\"${node.url}\" alt=\"${escapeHTML(node.alt)}\"${node.copyright ? ` copyright=\"${escapeHTML(node.copyright)}\"` : \"\"} />`;\n  if (node.linkTo) {\n    imageTag = serializeHyperlink(linkResolver, {\n      type: RichTextNodeType.hyperlink,\n      data: node.linkTo,\n      start: 0,\n      end: 0\n    }, [imageTag]);\n  }\n  return `<p class=\"block-img\">${imageTag}</p>`;\n};\nconst serializeEmbed = (node) => {\n  return `<div data-oembed=\"${node.oembed.embed_url}\" data-oembed-type=\"${node.oembed.type}\" data-oembed-provider=\"${node.oembed.provider_name}\"${getLabel(node)}>${node.oembed.html}</div>`;\n};\nconst serializeHyperlink = (linkResolver, node, children) => {\n  switch (node.data.link_type) {\n    case LinkType.Web: {\n      return `<a href=\"${escapeHTML(node.data.url)}\" ${node.data.target ? `target=\"${node.data.target}\" ` : \"\"}rel=\"noopener noreferrer\"${getLabel(node)}>${children.join(\"\")}</a>`;\n    }\n    case LinkType.Document: {\n      return `<a href=\"${asLink(node.data, linkResolver)}\"${getLabel(node)}>${children.join(\"\")}</a>`;\n    }\n    case LinkType.Media: {\n      return `<a href=\"${node.data.url}\"${getLabel(node)}>${children.join(\"\")}</a>`;\n    }\n  }\n};\nconst serializeSpan = (content) => {\n  return content ? escapeHTML(content).replace(/\\n/g, \"<br />\") : \"\";\n};\nexport {\n  getLabel,\n  serializeEmbed,\n  serializeHyperlink,\n  serializeImage,\n  serializePreFormatted,\n  serializeSpan,\n  serializeStandardTag\n};\n//# sourceMappingURL=serializerHelpers.js.map\n","import { composeSerializers, serialize, Element, wrapMapSerializer } from \"@prismicio/richtext\";\nimport { serializeSpan, serializeStandardTag, serializeHyperlink, serializeEmbed, serializeImage, serializePreFormatted } from \"../lib/serializerHelpers.js\";\nconst createDefaultHTMLRichTextSerializer = (linkResolver) => {\n  return (_type, node, text, children, _key) => {\n    switch (node.type) {\n      case Element.heading1:\n        return serializeStandardTag(\"h1\", node, children);\n      case Element.heading2:\n        return serializeStandardTag(\"h2\", node, children);\n      case Element.heading3:\n        return serializeStandardTag(\"h3\", node, children);\n      case Element.heading4:\n        return serializeStandardTag(\"h4\", node, children);\n      case Element.heading5:\n        return serializeStandardTag(\"h5\", node, children);\n      case Element.heading6:\n        return serializeStandardTag(\"h6\", node, children);\n      case Element.paragraph:\n        return serializeStandardTag(\"p\", node, children);\n      case Element.preformatted:\n        return serializePreFormatted(node);\n      case Element.strong:\n        return serializeStandardTag(\"strong\", node, children);\n      case Element.em:\n        return serializeStandardTag(\"em\", node, children);\n      case Element.listItem:\n        return serializeStandardTag(\"li\", node, children);\n      case Element.oListItem:\n        return serializeStandardTag(\"li\", node, children);\n      case Element.list:\n        return serializeStandardTag(\"ul\", node, children);\n      case Element.oList:\n        return serializeStandardTag(\"ol\", node, children);\n      case Element.image:\n        return serializeImage(linkResolver, node);\n      case Element.embed:\n        return serializeEmbed(node);\n      case Element.hyperlink:\n        return serializeHyperlink(linkResolver, node, children);\n      case Element.label:\n        return serializeStandardTag(\"span\", node, children);\n      case Element.span:\n      default:\n        return serializeSpan(text);\n    }\n  };\n};\nconst wrapMapSerializerWithStringChildren = (mapSerializer) => {\n  const modifiedMapSerializer = {};\n  for (const tag in mapSerializer) {\n    const tagSerializer = mapSerializer[tag];\n    if (tagSerializer) {\n      modifiedMapSerializer[tag] = (payload) => {\n        return tagSerializer({\n          ...payload,\n          // @ts-expect-error - merging blockSerializer types causes TS to bail to a never type\n          children: payload.children.join(\"\")\n        });\n      };\n    }\n  }\n  return wrapMapSerializer(modifiedMapSerializer);\n};\nconst asHTML = (richTextField, ...configObjectOrTuple) => {\n  if (richTextField) {\n    const [configObjectOrLinkResolver, maybeSerializer] = configObjectOrTuple;\n    let config;\n    if (typeof configObjectOrLinkResolver === \"function\" || configObjectOrLinkResolver == null) {\n      config = {\n        linkResolver: configObjectOrLinkResolver,\n        serializer: maybeSerializer\n      };\n    } else {\n      config = { ...configObjectOrLinkResolver };\n    }\n    let serializer;\n    if (config.serializer) {\n      serializer = composeSerializers(typeof config.serializer === \"object\" ? wrapMapSerializerWithStringChildren(config.serializer) : (type, node, text, children, key) => (\n        // TypeScript doesn't narrow the type correctly here since it is now in a callback function, so we have to cast it here.\n        config.serializer(type, node, text, children.join(\"\"), key)\n      ), createDefaultHTMLRichTextSerializer(config.linkResolver));\n    } else {\n      serializer = createDefaultHTMLRichTextSerializer(config.linkResolver);\n    }\n    return serialize(richTextField, serializer).join(\"\");\n  } else {\n    return null;\n  }\n};\nexport {\n  asHTML\n};\n//# sourceMappingURL=asHTML.js.map\n","import { RichTextReversedNodeType } from \"./types.js\";\nconst wrapMapSerializer = (mapSerializer) => {\n  return (type, node, text, children, key) => {\n    const tagSerializer = mapSerializer[RichTextReversedNodeType[type] || type];\n    if (tagSerializer) {\n      return tagSerializer({\n        // @ts-expect-error cannot type check here\n        type,\n        // @ts-expect-error cannot type check here\n        node,\n        // @ts-expect-error cannot type check here\n        text,\n        // @ts-expect-error cannot type check here\n        children,\n        // @ts-expect-error cannot type check here\n        key\n      });\n    }\n  };\n};\nexport {\n  wrapMapSerializer\n};\n//# sourceMappingURL=wrapMapSerializer.js.map\n","import type { ImgixURLParams } from \"./types.generated\";\n\n/**\n * Converts a camel case string to a param case string.\n *\n * @example\n *\n * ```ts\n * camelCaseToParamCase(\"fooBar\");\n * // => 'foo-bar'\n * ```\n *\n * @param input - Camel case string to convert.\n *\n * @returns Param case version of `input`.\n */\nconst camelCaseToParamCase = (input: string): string => {\n\treturn input.replace(/[A-Z]/g, (match) => {\n\t\treturn `-${match.toLowerCase()}`;\n\t});\n};\n\n/**\n * Builds a URL to an Imgix image with Imgix URL API parameters.\n *\n * The given URL must be a full absolute URL containing the protocol and domain.\n *\n * URL parameters already applied to the image will be retained. To remove\n * existing parameters, set the parameter to `undefined` in the `params`\n * argument.\n *\n * @example\n *\n * ```ts\n * const url = buildURL(\"https://example.imgix.net/image.png\", {\n * \twidth: 400,\n * });\n * // => https://example.imgix.net/image.png?width=400\n * ```\n *\n * @example\n *\n * ```ts\n * const url = buildURL(\"https://example.imgix.net/image.png?width=400\", {\n * \theight: 300,\n * });\n * // => https://example.imgix.net/image.png?width=400&height=300\n * ```\n *\n * @param url - Full absolute URL to the Imgix image.\n * @param params - An object of Imgix URL API parameters.\n *\n * @returns `url` with the given Imgix URL API parameters applied.\n *\n * @see Imgix URL API reference: https://docs.imgix.com/apis/rendering\n */\nexport const buildURL = (url: string, params: ImgixURLParams): string => {\n\tconst instance = new URL(url);\n\n\tfor (const camelCasedParamKey in params) {\n\t\tconst paramKey = camelCaseToParamCase(camelCasedParamKey);\n\t\tconst paramValue = params[camelCasedParamKey as keyof typeof params];\n\n\t\tif (paramValue === undefined) {\n\t\t\tinstance.searchParams.delete(paramKey);\n\t\t} else if (Array.isArray(paramValue)) {\n\t\t\tinstance.searchParams.set(paramKey, paramValue.join(\",\"));\n\t\t} else {\n\t\t\tinstance.searchParams.set(paramKey, `${paramValue}`);\n\t\t}\n\t}\n\n\t// Ensure the `s` parameter is the last parameter, if it exists.\n\t// @see https://github.com/imgix/imgix-blueprint#securing-urls\n\tconst s = instance.searchParams.get(\"s\");\n\tif (s) {\n\t\tinstance.searchParams.delete(\"s\");\n\t\tinstance.searchParams.append(\"s\", s);\n\t}\n\n\treturn instance.toString();\n};\n","import type { ImgixURLParams } from \"imgix-url-builder\";\n\nexport const PUBLIC_MODELS_FILE_NAME_SEED_CACHE_KEY =\n\t\"publicModelsFileNameSeed\";\n\n/**\n * Default Imgix parameters applied to all images.\n */\nexport const DEFAULT_IMGIX_PARAMS: ImgixURLParams = {\n\tfit: \"max\",\n};\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * Source: ftp://ftp.unicode.org/Public/UCD/latest/ucd/SpecialCasing.txt\n */\nvar SUPPORTED_LOCALE = {\n    tr: {\n        regexp: /\\u0130|\\u0049|\\u0049\\u0307/g,\n        map: {\n            İ: \"\\u0069\",\n            I: \"\\u0131\",\n            İ: \"\\u0069\",\n        },\n    },\n    az: {\n        regexp: /\\u0130/g,\n        map: {\n            İ: \"\\u0069\",\n            I: \"\\u0131\",\n            İ: \"\\u0069\",\n        },\n    },\n    lt: {\n        regexp: /\\u0049|\\u004A|\\u012E|\\u00CC|\\u00CD|\\u0128/g,\n        map: {\n            I: \"\\u0069\\u0307\",\n            J: \"\\u006A\\u0307\",\n            Į: \"\\u012F\\u0307\",\n            Ì: \"\\u0069\\u0307\\u0300\",\n            Í: \"\\u0069\\u0307\\u0301\",\n            Ĩ: \"\\u0069\\u0307\\u0303\",\n        },\n    },\n};\n/**\n * Localized lower case.\n */\nexport function localeLowerCase(str, locale) {\n    var lang = SUPPORTED_LOCALE[locale.toLowerCase()];\n    if (lang)\n        return lowerCase(str.replace(lang.regexp, function (m) { return lang.map[m]; }));\n    return lowerCase(str);\n}\n/**\n * Lower case as a function.\n */\nexport function lowerCase(str) {\n    return str.toLowerCase();\n}\n//# sourceMappingURL=index.js.map","import { lowerCase } from \"lower-case\";\n// Support camel case (\"camelCase\" -> \"camel Case\" and \"CAMELCase\" -> \"CAMEL Case\").\nvar DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];\n// Remove all non-word characters.\nvar DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;\n/**\n * Normalize the string into something other libraries can manipulate easier.\n */\nexport function noCase(input, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? \" \" : _d;\n    var result = replace(replace(input, splitRegexp, \"$1\\0$2\"), stripRegexp, \"\\0\");\n    var start = 0;\n    var end = result.length;\n    // Trim the delimiter from around the output string.\n    while (result.charAt(start) === \"\\0\")\n        start++;\n    while (result.charAt(end - 1) === \"\\0\")\n        end--;\n    // Transform each token independently.\n    return result.slice(start, end).split(\"\\0\").map(transform).join(delimiter);\n}\n/**\n * Replace `re` in the input string with the replacement value.\n */\nfunction replace(input, re, value) {\n    if (re instanceof RegExp)\n        return input.replace(re, value);\n    return re.reduce(function (input, re) { return input.replace(re, value); }, input);\n}\n//# sourceMappingURL=index.js.map","import { __assign } from \"tslib\";\nimport { noCase } from \"no-case\";\nexport function pascalCaseTransform(input, index) {\n    var firstChar = input.charAt(0);\n    var lowerChars = input.substr(1).toLowerCase();\n    if (index > 0 && firstChar >= \"0\" && firstChar <= \"9\") {\n        return \"_\" + firstChar + lowerChars;\n    }\n    return \"\" + firstChar.toUpperCase() + lowerChars;\n}\nexport function pascalCaseTransformMerge(input) {\n    return input.charAt(0).toUpperCase() + input.slice(1).toLowerCase();\n}\nexport function pascalCase(input, options) {\n    if (options === void 0) { options = {}; }\n    return noCase(input, __assign({ delimiter: \"\", transform: pascalCaseTransform }, options));\n}\n//# sourceMappingURL=index.js.map","import {\n\tpascalCase as basePascalCase,\n\tpascalCaseTransformMerge,\n} from \"pascal-case\";\n\n/**\n * Converts a string to a Pascal cased string.\n *\n * @param input - String to convert into a Pascal cased string.\n *\n * @returns Pascal cased string version of `input`.\n */\nexport const pascalCase = (...input: (string | undefined)[]): string => {\n\treturn basePascalCase(input.filter(Boolean).join(\" \"), {\n\t\ttransform: pascalCaseTransformMerge,\n\t});\n};\n","export const uuid = (): string => {\n\treturn (++uuid.i).toString();\n};\nuuid.i = 0;\n","import {\n\tAnyRegularField,\n\tCustomTypeModel,\n\tCustomTypeModelField,\n\tCustomTypeModelFieldType,\n\tCustomTypeModelGroupField,\n\tCustomTypeModelImageField,\n\tCustomTypeModelSlice,\n\tCustomTypeModelSliceType,\n\tCustomTypeModelSliceZoneField,\n\tGroupField,\n\tImageField,\n\tImageFieldImage,\n\tLinkField,\n\tPrismicDocument,\n\tRichTextField,\n\tSharedSlice,\n\tSharedSliceModel,\n\tSliceZone,\n\tasHTML,\n\tasLink,\n\tasText,\n\tisFilled,\n} from \"@prismicio/client\";\nimport { IUrlBuilderArgs, getImageData } from \"gatsby-plugin-image\";\nimport { ImgixURLParams, buildURL } from \"imgix-url-builder\";\n\nimport type {\n\tNormalizedDocument,\n\tPluginOptions,\n\tRepositoryConfig,\n} from \"../types\";\n\nimport { DEFAULT_IMGIX_PARAMS } from \"../constants\";\n\nimport { getDocument } from \"./getDocument\";\nimport { hasOwnProperty } from \"./hasOwnProperty\";\nimport { pascalCase } from \"./pascalCase\";\nimport { uuid } from \"./uuid\";\n\n// TODO: Consider changing the lazy-loading property design (currently using\n// getters) to only call the getter once (i.e. cache the result, like\n// memoization)\n\nconst defaultTransformFieldName = (fieldName: string): string => {\n\treturn fieldName.replace(/-/g, \"_\");\n};\n\nconst withDocumentProxy = <\n\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\tTTarget extends Record<any, any>,\n>(\n\ttarget: TTarget,\n\trepositoryConfig: RepositoryConfig,\n): TTarget => {\n\treturn new Proxy(target, {\n\t\tget(target, prop, receiver) {\n\t\t\tif (prop === \"document\") {\n\t\t\t\tif (hasOwnProperty(target, \"id\") && typeof target.id === \"string\") {\n\t\t\t\t\treturn getDocument(target.id) || null;\n\t\t\t\t}\n\t\t\t} else if (prop === \"url\") {\n\t\t\t\tif (hasOwnProperty(target, \"id\") && typeof target.id === \"string\") {\n\t\t\t\t\tconst document = getDocument(target.id);\n\n\t\t\t\t\tif (document) {\n\t\t\t\t\t\treturn asLink(document.raw, {\n\t\t\t\t\t\t\tlinkResolver: repositoryConfig.linkResolver,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Reflect.get(target, prop, receiver);\n\t\t},\n\t});\n};\n\ntype ImgixGatsbyImageDataUrlBuilderArgs = IUrlBuilderArgs<{\n\timageImgixParams?: ImgixURLParams;\n}>;\n\nconst imgixGatsbyImageDataUrlBuilder = (\n\targs: ImgixGatsbyImageDataUrlBuilderArgs,\n) => {\n\treturn buildURL(args.baseUrl, {\n\t\t...DEFAULT_IMGIX_PARAMS,\n\t\t...args.options.imageImgixParams,\n\t\tfm: args.format && args.format !== \"auto\" ? args.format : undefined,\n\t\tw: args.width,\n\t\th: args.height,\n\t});\n};\n\nconst normalizeImageField = (\n\timage: ImageFieldImage,\n\tpluginOptions: PluginOptions,\n) => {\n\treturn {\n\t\t...image,\n\t\tget url() {\n\t\t\tif (isFilled.image(image)) {\n\t\t\t\treturn buildURL(image.url, {\n\t\t\t\t\t...DEFAULT_IMGIX_PARAMS,\n\t\t\t\t\t...pluginOptions.imageImgixParams,\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\t\tget gatsbyImageData() {\n\t\t\tif (isFilled.image(image)) {\n\t\t\t\treturn getImageData({\n\t\t\t\t\tbaseUrl: image.url,\n\t\t\t\t\tsourceWidth: image.dimensions.width,\n\t\t\t\t\tsourceHeight: image.dimensions.height,\n\t\t\t\t\turlBuilder: imgixGatsbyImageDataUrlBuilder,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\timageImgixParams: pluginOptions.imageImgixParams,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\t\tget localFile() {\n\t\t\tif (isFilled.image(image)) {\n\t\t\t\treturn {\n\t\t\t\t\tpublicURL: image.url,\n\t\t\t\t\tchildImageSharp: {\n\t\t\t\t\t\tget gatsbyImageData() {\n\t\t\t\t\t\t\treturn getImageData({\n\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\t\t\t\tbaseUrl: image.url!,\n\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\t\t\t\tsourceWidth: image.dimensions!.width,\n\t\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\t\t\t\tsourceHeight: image.dimensions!.height,\n\t\t\t\t\t\t\t\turlBuilder: imgixGatsbyImageDataUrlBuilder,\n\t\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\t\timageImgixParams: pluginOptions.imageImgixParams,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\t};\n};\n\nconst normalizeField = async (\n\tlooseModel: CustomTypeModelField | undefined,\n\tlooseValue: AnyRegularField | GroupField | SliceZone,\n\tpath: string[],\n\tsharedSliceModels: SharedSliceModel[],\n\trepositoryConfig: RepositoryConfig,\n\tpluginOptions: PluginOptions,\n) => {\n\tswitch (looseModel?.type) {\n\t\tcase CustomTypeModelFieldType.Slices: {\n\t\t\tconst value = looseValue as SliceZone;\n\n\t\t\tif (isFilled.sliceZone(value)) {\n\t\t\t\treturn await Promise.all(\n\t\t\t\t\tvalue.map(async (slice) => {\n\t\t\t\t\t\tconst model = looseModel as CustomTypeModelSliceZoneField;\n\t\t\t\t\t\tconst sliceModel = model.config?.choices?.[slice.slice_type] as\n\t\t\t\t\t\t\t| CustomTypeModelSlice\n\t\t\t\t\t\t\t| SharedSliceModel\n\t\t\t\t\t\t\t| undefined;\n\n\t\t\t\t\t\tif (sliceModel) {\n\t\t\t\t\t\t\tconst result: Omit<typeof slice, \"primary\" | \"items\"> & {\n\t\t\t\t\t\t\t\t__typename: string;\n\t\t\t\t\t\t\t\tid: string;\n\t\t\t\t\t\t\t\tprimary: Record<string, unknown>;\n\t\t\t\t\t\t\t\titems: Record<string, unknown>[];\n\t\t\t\t\t\t\t} = {\n\t\t\t\t\t\t\t\t...slice,\n\t\t\t\t\t\t\t\tid: uuid(),\n\t\t\t\t\t\t\t\t__typename: pascalCase(\n\t\t\t\t\t\t\t\t\t\"Prismic\",\n\t\t\t\t\t\t\t\t\tpluginOptions.typePrefix,\n\t\t\t\t\t\t\t\t\t...path,\n\t\t\t\t\t\t\t\t\tslice.slice_type,\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tif (sliceModel.type === CustomTypeModelSliceType.Slice) {\n\t\t\t\t\t\t\t\tresult.primary = await normalizeFields(\n\t\t\t\t\t\t\t\t\tslice.primary,\n\t\t\t\t\t\t\t\t\tsliceModel[\"non-repeat\"] || {},\n\t\t\t\t\t\t\t\t\t[...path, slice.slice_type, \"primary\"],\n\t\t\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t\t\t\trepositoryConfig,\n\t\t\t\t\t\t\t\t\tpluginOptions,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tresult.items = await Promise.all(\n\t\t\t\t\t\t\t\t\tslice.items.map(async (item) => {\n\t\t\t\t\t\t\t\t\t\treturn await normalizeFields(\n\t\t\t\t\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\t\t\t\t\tsliceModel.repeat || {},\n\t\t\t\t\t\t\t\t\t\t\t[...path, slice.slice_type, \"item\"],\n\t\t\t\t\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t\t\t\t\t\trepositoryConfig,\n\t\t\t\t\t\t\t\t\t\t\tpluginOptions,\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\tsliceModel.type === CustomTypeModelSliceType.SharedSlice\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst typedSlice = slice as SharedSlice;\n\t\t\t\t\t\t\t\tconst sharedSliceModel = sharedSliceModels.find(\n\t\t\t\t\t\t\t\t\t(m) => m.id === slice.slice_type,\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tconst variationModel = sharedSliceModel?.variations.find(\n\t\t\t\t\t\t\t\t\t(m) => m.id === typedSlice.variation,\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\tif (sharedSliceModel && variationModel) {\n\t\t\t\t\t\t\t\t\tresult.__typename = pascalCase(\n\t\t\t\t\t\t\t\t\t\t\"Prismic\",\n\t\t\t\t\t\t\t\t\t\tpluginOptions.typePrefix,\n\t\t\t\t\t\t\t\t\t\tsharedSliceModel.id,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tresult.primary = await normalizeFields(\n\t\t\t\t\t\t\t\t\t\tslice.primary,\n\t\t\t\t\t\t\t\t\t\tvariationModel.primary || {},\n\t\t\t\t\t\t\t\t\t\t[...path, slice.slice_type, \"primary\"],\n\t\t\t\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t\t\t\t\trepositoryConfig,\n\t\t\t\t\t\t\t\t\t\tpluginOptions,\n\t\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t\tresult.items = await Promise.all(\n\t\t\t\t\t\t\t\t\t\tslice.items.map(async (item) => {\n\t\t\t\t\t\t\t\t\t\t\treturn await normalizeFields(\n\t\t\t\t\t\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\t\t\t\t\t\tvariationModel.items || {},\n\t\t\t\t\t\t\t\t\t\t\t\t[...path, slice.slice_type, \"item\"],\n\t\t\t\t\t\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t\t\t\t\t\t\trepositoryConfig,\n\t\t\t\t\t\t\t\t\t\t\t\tpluginOptions,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn slice;\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\tcase CustomTypeModelFieldType.Group: {\n\t\t\tconst value = looseValue as GroupField;\n\n\t\t\tif (isFilled.group(value)) {\n\t\t\t\treturn await Promise.all(\n\t\t\t\t\tvalue.map(async (item) => {\n\t\t\t\t\t\tconst model = looseModel as CustomTypeModelGroupField;\n\n\t\t\t\t\t\treturn await normalizeFields(\n\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\tmodel.config?.fields || {},\n\t\t\t\t\t\t\tpath,\n\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t\trepositoryConfig,\n\t\t\t\t\t\t\tpluginOptions,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\n\t\tcase CustomTypeModelFieldType.Link: {\n\t\t\tconst value = looseValue as LinkField;\n\n\t\t\tconst result: Omit<typeof value, \"url\"> & {\n\t\t\t\tid?: string;\n\t\t\t\turl: string | null;\n\t\t\t\ttarget?: string | null;\n\t\t\t\traw: typeof value;\n\t\t\t\tdocument?: unknown;\n\t\t\t\tlocalFile: { publicURL: string } | null;\n\t\t\t} = {\n\t\t\t\t...value,\n\t\t\t\ttarget:\n\t\t\t\t\t\"target\" in value && value.target ? value.target || null : undefined,\n\t\t\t\turl:\n\t\t\t\t\tasLink(value, { linkResolver: repositoryConfig.linkResolver }) ??\n\t\t\t\t\tnull,\n\t\t\t\traw: value,\n\t\t\t\tlocalFile: null,\n\t\t\t};\n\n\t\t\tif (value.link_type === \"Media\" && \"url\" in value && value.url) {\n\t\t\t\tresult.localFile = {\n\t\t\t\t\tpublicURL: value.url,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn withDocumentProxy(result, repositoryConfig);\n\t\t}\n\n\t\tcase CustomTypeModelFieldType.StructuredText: {\n\t\t\tconst value = looseValue as RichTextField;\n\n\t\t\treturn {\n\t\t\t\tget html() {\n\t\t\t\t\tif (isFilled.richText(value)) {\n\t\t\t\t\t\treturn asHTML(value, {\n\t\t\t\t\t\t\tlinkResolver: repositoryConfig.linkResolver,\n\t\t\t\t\t\t\tserializer: repositoryConfig.htmlSerializer,\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tget text() {\n\t\t\t\t\tif (isFilled.richText(value)) {\n\t\t\t\t\t\treturn asText(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trichText: value,\n\t\t\t\traw: value,\n\t\t\t};\n\t\t}\n\n\t\tcase CustomTypeModelFieldType.Image: {\n\t\t\tconst value = looseValue as ImageField<string>;\n\n\t\t\tconst result = {\n\t\t\t\t...normalizeImageField(value, pluginOptions),\n\t\t\t\tget thumbnails() {\n\t\t\t\t\tconst model = looseModel as CustomTypeModelImageField;\n\t\t\t\t\tconst transformFieldName =\n\t\t\t\t\t\trepositoryConfig.transformFieldName || defaultTransformFieldName;\n\n\t\t\t\t\tif (model.config?.thumbnails) {\n\t\t\t\t\t\tconst thumbnails: Record<\n\t\t\t\t\t\t\tstring,\n\t\t\t\t\t\t\tReturnType<typeof normalizeImageField>\n\t\t\t\t\t\t> = {};\n\n\t\t\t\t\t\tfor (const thumbnailModel of model.config.thumbnails) {\n\t\t\t\t\t\t\tconst transformedThumbnailName = transformFieldName(\n\t\t\t\t\t\t\t\tthumbnailModel.name,\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\tthumbnails[transformedThumbnailName] = normalizeImageField(\n\t\t\t\t\t\t\t\tvalue[thumbnailModel.name],\n\t\t\t\t\t\t\t\tpluginOptions,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn thumbnails;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\n\t\t\treturn result;\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn looseValue;\n\t\t}\n\t}\n};\n\nconst normalizeFields = async (\n\tfields: Record<string, AnyRegularField | GroupField | SliceZone>,\n\tmodels: Record<string, CustomTypeModelField>,\n\tpath: string[],\n\tsharedSliceModels: SharedSliceModel[],\n\trepositoryConfig: RepositoryConfig,\n\tpluginOptions: PluginOptions,\n) => {\n\tconst result: Record<string, unknown> = {};\n\n\tconst fieldNames = Object.keys(models);\n\n\tawait Promise.all(\n\t\tfieldNames.map(async (fieldName) => {\n\t\t\tif (fieldName !== \"uid\") {\n\t\t\t\tconst transformFieldName =\n\t\t\t\t\trepositoryConfig.transformFieldName || defaultTransformFieldName;\n\t\t\t\tconst transformedFieldName = transformFieldName(fieldName);\n\n\t\t\t\tresult[transformedFieldName] = await normalizeField(\n\t\t\t\t\tmodels[fieldName],\n\t\t\t\t\tfields[fieldName],\n\t\t\t\t\t[...path, fieldName],\n\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\trepositoryConfig,\n\t\t\t\t\tpluginOptions,\n\t\t\t\t);\n\t\t\t}\n\t\t}),\n\t);\n\n\treturn result;\n};\n\nexport const normalizeDocument = async (\n\tdocument: PrismicDocument,\n\tmodel: CustomTypeModel,\n\tsharedSliceModels: SharedSliceModel[],\n\trepositoryConfig: RepositoryConfig,\n\tpluginOptions: PluginOptions,\n): Promise<NormalizedDocument> => {\n\tconst normalizedDocument = {\n\t\t...document,\n\t\t__typename: pascalCase(\"Prismic\", pluginOptions.typePrefix, model.id),\n\t\t_previewable: document.id,\n\t\tprismicId: document.id,\n\t\tid: uuid(),\n\t\turl:\n\t\t\tasLink(document, { linkResolver: repositoryConfig.linkResolver }) ?? null,\n\t\tdataRaw: document.data,\n\t\traw: document,\n\t\talternate_languages: document.alternate_languages.map(\n\t\t\t(alternateLanguage) => {\n\t\t\t\treturn withDocumentProxy(alternateLanguage, repositoryConfig);\n\t\t\t},\n\t\t),\n\t};\n\n\tif (Object.keys(document.data).length > 0) {\n\t\tconst fieldModels: CustomTypeModel[\"json\"][string] = Object.assign(\n\t\t\t{},\n\t\t\t...Object.values(model.json),\n\t\t);\n\n\t\tnormalizedDocument.data = await normalizeFields(\n\t\t\tdocument.data,\n\t\t\tfieldModels,\n\t\t\t[model.id, \"data\"],\n\t\t\tsharedSliceModels,\n\t\t\trepositoryConfig,\n\t\t\tpluginOptions,\n\t\t);\n\t}\n\n\treturn normalizedDocument;\n};\n","const composeSerializers = (...serializers) => {\n  return (...args) => {\n    for (let i = 0; i < serializers.length; i++) {\n      const serializer = serializers[i];\n      if (serializer) {\n        const res = serializer(...args);\n        if (res != null) {\n          return res;\n        }\n      }\n    }\n  };\n};\nexport {\n  composeSerializers\n};\n//# sourceMappingURL=composeSerializers.js.map\n","import { asText as asText$1 } from \"@prismicio/richtext\";\nconst asText = (richTextField, ...configObjectOrTuple) => {\n  if (richTextField) {\n    const [configObjectOrSeparator] = configObjectOrTuple;\n    let config;\n    if (typeof configObjectOrSeparator === \"string\") {\n      config = {\n        separator: configObjectOrSeparator\n      };\n    } else {\n      config = { ...configObjectOrSeparator };\n    }\n    return asText$1(richTextField, config.separator);\n  } else {\n    return null;\n  }\n};\nexport {\n  asText\n};\n//# sourceMappingURL=asText.js.map\n","const asText = (richTextField, separator = \" \") => {\n  let result = \"\";\n  for (let i = 0; i < richTextField.length; i++) {\n    if (\"text\" in richTextField[i]) {\n      result += (result ? separator : \"\") + richTextField[i].text;\n    }\n  }\n  return result;\n};\nexport {\n  asText\n};\n//# sourceMappingURL=asText.js.map\n","import {\n\tAnyRegularField,\n\tClient,\n\tCustomTypeModel,\n\tCustomTypeModelField,\n\tCustomTypeModelFieldType,\n\tCustomTypeModelGroupField,\n\tCustomTypeModelSlice,\n\tCustomTypeModelSliceType,\n\tCustomTypeModelSliceZoneField,\n\tGroupField,\n\tLinkField,\n\tPrismicDocument,\n\tSharedSlice,\n\tSharedSliceModel,\n\tSliceZone,\n} from \"@prismicio/client\";\n\nimport type { PluginOptions, RepositoryConfig } from \"../types\";\n\nimport { usePrismicPreviewStore } from \"../usePrismicPreviewStore\";\n\nimport { normalizeDocument } from \"./normalizeDocument\";\n\nconst extractLinkedDocumentIDsFromField = async (\n\tlooseValue: AnyRegularField | GroupField | SliceZone,\n\tlooseModel: CustomTypeModelField,\n\tsharedSliceModels: SharedSliceModel[],\n): Promise<string[]> => {\n\tswitch (looseModel.type) {\n\t\tcase CustomTypeModelFieldType.Slices: {\n\t\t\tconst value = looseValue as SliceZone;\n\n\t\t\treturn (\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tvalue.map(async (slice) => {\n\t\t\t\t\t\tconst model = looseModel as CustomTypeModelSliceZoneField;\n\t\t\t\t\t\tconst sliceModel = model.config?.choices?.[slice.slice_type] as\n\t\t\t\t\t\t\t| CustomTypeModelSlice\n\t\t\t\t\t\t\t| SharedSliceModel\n\t\t\t\t\t\t\t| undefined;\n\n\t\t\t\t\t\tif (sliceModel) {\n\t\t\t\t\t\t\tif (sliceModel.type === CustomTypeModelSliceType.Slice) {\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\tawait Promise.all([\n\t\t\t\t\t\t\t\t\t\textractLinkedDocumentIDsFromFields(\n\t\t\t\t\t\t\t\t\t\t\tslice.primary,\n\t\t\t\t\t\t\t\t\t\t\tsliceModel[\"non-repeat\"] || {},\n\t\t\t\t\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t...slice.items.map(async (item) => {\n\t\t\t\t\t\t\t\t\t\t\treturn extractLinkedDocumentIDsFromFields(\n\t\t\t\t\t\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\t\t\t\t\t\tsliceModel.repeat || {},\n\t\t\t\t\t\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t).flat();\n\t\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t\tsliceModel.type === CustomTypeModelSliceType.SharedSlice\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconst typedSlice = slice as SharedSlice;\n\t\t\t\t\t\t\t\tconst variationModel = sharedSliceModels\n\t\t\t\t\t\t\t\t\t.find((m) => m.id === slice.slice_type)\n\t\t\t\t\t\t\t\t\t?.variations.find((m) => m.id === typedSlice.variation);\n\n\t\t\t\t\t\t\t\tif (variationModel) {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\tawait Promise.all([\n\t\t\t\t\t\t\t\t\t\t\textractLinkedDocumentIDsFromFields(\n\t\t\t\t\t\t\t\t\t\t\t\tslice.primary,\n\t\t\t\t\t\t\t\t\t\t\t\tvariationModel.primary || {},\n\t\t\t\t\t\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t\t...slice.items.map(async (item) => {\n\t\t\t\t\t\t\t\t\t\t\t\treturn extractLinkedDocumentIDsFromFields(\n\t\t\t\t\t\t\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\t\t\t\t\t\t\tvariationModel.items || {},\n\t\t\t\t\t\t\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t).flat();\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn [];\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t).flat();\n\t\t}\n\n\t\tcase CustomTypeModelFieldType.Group: {\n\t\t\tconst value = looseValue as GroupField;\n\n\t\t\treturn (\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tvalue.map(async (item) => {\n\t\t\t\t\t\tconst model = looseModel as CustomTypeModelGroupField;\n\n\t\t\t\t\t\treturn await extractLinkedDocumentIDsFromFields(\n\t\t\t\t\t\t\titem,\n\t\t\t\t\t\t\tmodel.config?.fields || {},\n\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t);\n\t\t\t\t\t}),\n\t\t\t\t)\n\t\t\t).flat();\n\t\t}\n\n\t\tcase CustomTypeModelFieldType.Link: {\n\t\t\tconst value = looseValue as LinkField;\n\n\t\t\tif (\"id\" in value && !value.isBroken) {\n\t\t\t\treturn [value.id];\n\t\t\t}\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn [];\n\t\t}\n\t}\n};\n\nconst extractLinkedDocumentIDsFromFields = async (\n\tfields: Record<string, AnyRegularField | GroupField | SliceZone>,\n\tmodels: Record<string, CustomTypeModelField>,\n\tsharedSliceModels: SharedSliceModel[],\n): Promise<string[]> => {\n\tconst fieldNames = Object.keys(models);\n\n\treturn (\n\t\tawait Promise.all(\n\t\t\tfieldNames.map(async (fieldName) => {\n\t\t\t\treturn extractLinkedDocumentIDsFromField(\n\t\t\t\t\tfields[fieldName],\n\t\t\t\t\tmodels[fieldName],\n\t\t\t\t\tsharedSliceModels,\n\t\t\t\t);\n\t\t\t}),\n\t\t)\n\t).flat();\n};\n\nconst extractLinkedDocumentIDs = async (\n\tdocument: PrismicDocument,\n\tcustomTypeModels: CustomTypeModel[],\n\tsharedSliceModels: SharedSliceModel[],\n): Promise<string[]> => {\n\tconst model = customTypeModels.find(\n\t\t(customTypeModel) => customTypeModel.id === document.type,\n\t);\n\n\tif (model) {\n\t\tconst fieldModels: CustomTypeModel[\"json\"][string] = Object.assign(\n\t\t\t{},\n\t\t\t...Object.values(model.json),\n\t\t);\n\n\t\tconst linkedIDs = await extractLinkedDocumentIDsFromFields(\n\t\t\tdocument.data,\n\t\t\tfieldModels,\n\t\t\tsharedSliceModels,\n\t\t);\n\n\t\tconst alternateLanguageIDs = document.alternate_languages.map(\n\t\t\t(alternateLanguage) => {\n\t\t\t\treturn alternateLanguage.id;\n\t\t\t},\n\t\t);\n\t\tlinkedIDs.push(...alternateLanguageIDs);\n\n\t\treturn linkedIDs;\n\t} else {\n\t\treturn [];\n\t}\n};\n\nexport const fetchLinkedDocuments = async (\n\tdocuments: PrismicDocument[],\n\tclient: Client,\n\tpluginOptions: PluginOptions,\n\trepositoryConfig: RepositoryConfig,\n\tcustomTypeModels: CustomTypeModel[],\n\tsharedSliceModels: SharedSliceModel[],\n\tabortController: AbortController,\n\titerationCount = 0,\n\tmaximumIterationCount = 3,\n\taggregateAlreadyFetchedIDs: string[] = [],\n): Promise<void> => {\n\tif (iterationCount >= maximumIterationCount) {\n\t\tconsole.warn(\n\t\t\t`The maximum depth to which gatsby-plugin-prismic-previews will fetch linked documents (${maximumIterationCount} levels deep) was reached. Any Link field's \\`document\\` property nested below ${maximumIterationCount} levels deep will return undefined.`,\n\t\t);\n\n\t\treturn;\n\t}\n\n\tconst alreadyFetchedIDs = [\n\t\t...aggregateAlreadyFetchedIDs,\n\t\t...documents.map((doc) => doc.id),\n\t];\n\n\tconst ids = (\n\t\tawait Promise.all(\n\t\t\tdocuments.map(async (doc) => {\n\t\t\t\treturn extractLinkedDocumentIDs(\n\t\t\t\t\tdoc,\n\t\t\t\t\tcustomTypeModels,\n\t\t\t\t\tsharedSliceModels,\n\t\t\t\t);\n\t\t\t}),\n\t\t)\n\t).flat();\n\n\tconst prunedIDs = ids.filter((id) => !alreadyFetchedIDs.includes(id));\n\n\tif (prunedIDs.length > 0) {\n\t\tconst fetchedLinkedDocuments = await client.getAllByIDs(\n\t\t\t[...new Set(prunedIDs)],\n\t\t\t{ signal: abortController.signal },\n\t\t);\n\n\t\tawait Promise.all([\n\t\t\tPromise.all(\n\t\t\t\tfetchedLinkedDocuments.map(async (doc) => {\n\t\t\t\t\tconst model = customTypeModels.find(\n\t\t\t\t\t\t(customTypeModel) => customTypeModel.id === doc.type,\n\t\t\t\t\t);\n\n\t\t\t\t\tif (model) {\n\t\t\t\t\t\tconst normalizedDocument = await normalizeDocument(\n\t\t\t\t\t\t\tdoc,\n\t\t\t\t\t\t\tmodel,\n\t\t\t\t\t\t\tsharedSliceModels,\n\t\t\t\t\t\t\tpluginOptions,\n\t\t\t\t\t\t\trepositoryConfig,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst state = usePrismicPreviewStore.getState();\n\t\t\t\t\t\tstate.addDocument(normalizedDocument);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t),\n\t\t\tfetchLinkedDocuments(\n\t\t\t\tfetchedLinkedDocuments,\n\t\t\t\tclient,\n\t\t\t\tpluginOptions,\n\t\t\t\trepositoryConfig,\n\t\t\t\tcustomTypeModels,\n\t\t\t\tsharedSliceModels,\n\t\t\t\tabortController,\n\t\t\t\titerationCount + 1,\n\t\t\t\tmaximumIterationCount,\n\t\t\t\t[...alreadyFetchedIDs, ...prunedIDs],\n\t\t\t),\n\t\t]);\n\t}\n};\n","import { getPreviewCookie } from \"./getPreviewCookie\";\n\nexport const isReleasePreview = (): boolean => {\n\treturn /\\/previews\\/.*~.*\\?websitePreviewId/.test(getPreviewCookie() || \"\");\n};\n","import { Client, PrismicDocument, filter } from \"@prismicio/client\";\n\nimport { isReleasePreview } from \"./isReleasePreview\";\n\ntype FetchNewDocumentsArgs = {\n\tclient: Client;\n\tabortController: AbortController;\n};\n\nexport const fetchNewDocuments = async ({\n\tclient,\n\tabortController,\n}: FetchNewDocumentsArgs): Promise<PrismicDocument[]> => {\n\tconst signal = abortController.signal;\n\n\tconst first = await client.getFirst({ signal });\n\n\tif (isReleasePreview()) {\n\t\tconst rest = await client.dangerouslyGetAll({\n\t\t\tpredicates: [\n\t\t\t\tfilter.dateBetween(\n\t\t\t\t\t\"document.last_publication_date\",\n\t\t\t\t\tDate.parse(first.last_publication_date),\n\t\t\t\t\tDate.parse(first.last_publication_date) + 1000,\n\t\t\t\t),\n\t\t\t\tfilter.not(\"document.id\", first.id),\n\t\t\t],\n\t\t\tsignal,\n\t\t});\n\n\t\treturn [first, ...rest];\n\t} else {\n\t\treturn [first];\n\t}\n};\n","import { PrismicError } from \"./errors/PrismicError.js\";\nimport { isRepositoryName } from \"./isRepositoryName.js\";\nconst getGraphQLEndpoint = (repositoryName) => {\n  if (isRepositoryName(repositoryName)) {\n    return `https://${repositoryName}.cdn.prismic.io/graphql`;\n  } else {\n    throw new PrismicError(`An invalid Prismic repository name was given: ${repositoryName}`, void 0, void 0);\n  }\n};\nexport {\n  getGraphQLEndpoint\n};\n//# sourceMappingURL=getGraphQLEndpoint.js.map\n","import { Client, getGraphQLEndpoint } from \"@prismicio/client\";\n\nimport { PluginOptions } from \"../types\";\n\nimport { isReleasePreview } from \"./isReleasePreview\";\n\ntype FetchPublishedDocumentIDsGraphQLResult = {\n\tdata: {\n\t\t_allDocuments: {\n\t\t\tpageInfo: {\n\t\t\t\tendCursor: string;\n\t\t\t\thasNextPage: boolean;\n\t\t\t};\n\t\t\tedges: {\n\t\t\t\tnode: {\n\t\t\t\t\t_meta: {\n\t\t\t\t\t\tid: string;\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t}[];\n\t\t};\n\t};\n};\n\ntype FetchPublishedDocumentIDsArgs = {\n\tclient: Client;\n\tabortController: AbortController;\n\tpluginOptions: PluginOptions;\n};\n\nexport const fetchPublishedDocumentIDs = async ({\n\tclient,\n\tabortController,\n\tpluginOptions,\n}: FetchPublishedDocumentIDsArgs): Promise<string[]> => {\n\tif (isReleasePreview()) {\n\t\tconst endpoint =\n\t\t\tpluginOptions.graphQLEndpoint ||\n\t\t\tgetGraphQLEndpoint(pluginOptions.repositoryName);\n\n\t\tconst existingIDs: string[] = [];\n\n\t\tlet after: string | undefined;\n\t\tlet hasNextPage = false;\n\t\tdo {\n\t\t\tconst url = new URL(endpoint);\n\t\t\tconst afterStr = after ? `,after:\"${after}\"` : \"\";\n\t\t\turl.searchParams.set(\n\t\t\t\t\"query\",\n\t\t\t\t`query AllDocumentIDs{_allDocuments(first:100${afterStr}){pageInfo{endCursor,hasNextPage}edges{node{_meta{id}}}}}`,\n\t\t\t);\n\n\t\t\tconst res = await client.graphQLFetch(url.toString(), {\n\t\t\t\tsignal: abortController.signal,\n\t\t\t});\n\t\t\tconst json: FetchPublishedDocumentIDsGraphQLResult = await res.json();\n\n\t\t\tfor (let i = 0; i < json.data._allDocuments.edges.length; i++) {\n\t\t\t\texistingIDs.push(json.data._allDocuments.edges[i].node._meta.id);\n\t\t\t}\n\n\t\t\tafter = json.data._allDocuments.pageInfo.endCursor;\n\t\t\thasNextPage = json.data._allDocuments.pageInfo.hasNextPage;\n\t\t} while (hasNextPage);\n\n\t\treturn existingIDs;\n\t} else {\n\t\treturn [];\n\t}\n};\n","import { CustomTypeModel, SharedSliceModel } from \"@prismicio/client\";\nimport { withAssetPrefix } from \"gatsby\";\n\nimport { usePrismicPreviewStore } from \"../usePrismicPreviewStore\";\n\nimport { fetchLinkedDocuments } from \"./fetchLinkedDocuments\";\nimport { fetchNewDocuments } from \"./fetchNewDocuments\";\nimport { fetchPublishedDocumentIDs } from \"./fetchPublishedDocumentIDs\";\nimport { fmtLog } from \"./fmtLog\";\nimport { getClient } from \"./getClient\";\nimport { getPluginOptions } from \"./getPluginOptions\";\nimport { getRepositoryConfig } from \"./getRepositoryConfig\";\nimport { normalizeDocument } from \"./normalizeDocument\";\n\nconst bootstrapPrismicPreview = async (\n\trepositoryName: string,\n\tabortController: AbortController,\n): Promise<void> => {\n\tconst state = usePrismicPreviewStore.getState();\n\n\t// Only bootstrap once per session\n\tif (state.isBootstrapped) {\n\t\treturn;\n\t}\n\n\tconst pluginOptions = getPluginOptions(repositoryName);\n\tif (!pluginOptions) {\n\t\tconsole.error(\n\t\t\tfmtLog(\n\t\t\t\trepositoryName,\n\t\t\t\t'Plugin options could not be found. Did you add \"gatsby-plugin-prismic-previews\" for this repository to your app\\'s \"gatsby-config.js\" file?',\n\t\t\t),\n\t\t);\n\n\t\treturn;\n\t}\n\n\tconst repositoryConfig = getRepositoryConfig(repositoryName);\n\tif (!repositoryConfig) {\n\t\tconsole.error(\n\t\t\tfmtLog(\n\t\t\t\trepositoryName,\n\t\t\t\t'Repository configuration could not be found. Did you add <PrismicPreviewProvider> to your \"gatsby-browser.js\" and \"gatsby-ssr.js\"? It must contain a repository configuration object for this repository.',\n\t\t\t),\n\t\t);\n\n\t\treturn;\n\t}\n\n\tconst client = getClient(pluginOptions);\n\n\tconst signal = abortController.signal;\n\n\t// @ts-expect-error - `getCachedRepository()` is a private internal\n\t// client method. We use it here to manually prime the cached\n\t// repository cache. This saves us from fetching the repository\n\t// multiple times when we run queries in parallel in the next block.\n\tawait client.getCachedRepository();\n\n\tconst [localPublishedDocumentIDs, newDocuments] = await Promise.all([\n\t\tfetchPublishedDocumentIDs({\n\t\t\tclient,\n\t\t\tabortController,\n\t\t\tpluginOptions,\n\t\t}),\n\t\tfetchNewDocuments({ client, abortController }),\n\t]);\n\n\tif (localPublishedDocumentIDs.length) {\n\t\tstate.setPublishedDocumentIDs(localPublishedDocumentIDs);\n\t}\n\n\tconst modelsRaw = await fetch(withAssetPrefix(__PUBLIC_MODELS_PATH__), {\n\t\tsignal,\n\t});\n\tconst models: Record<\n\t\tstring,\n\t\t{\n\t\t\tcustomTypeModels: CustomTypeModel[];\n\t\t\tsharedSliceModels: SharedSliceModel[];\n\t\t}\n\t> = await modelsRaw.json();\n\n\tconst modelsForRepository = models[pluginOptions.repositoryName];\n\n\tawait Promise.all([\n\t\tfetchLinkedDocuments(\n\t\t\tnewDocuments,\n\t\t\tclient,\n\t\t\tpluginOptions,\n\t\t\trepositoryConfig,\n\t\t\tmodelsForRepository.customTypeModels,\n\t\t\tmodelsForRepository.sharedSliceModels,\n\t\t\tabortController,\n\t\t),\n\t\tPromise.all(\n\t\t\tnewDocuments.map(async (doc) => {\n\t\t\t\tconst model = modelsForRepository.customTypeModels.find(\n\t\t\t\t\t(model) => model.id === doc.type,\n\t\t\t\t);\n\n\t\t\t\tif (model) {\n\t\t\t\t\tconst normalizedDocument = await normalizeDocument(\n\t\t\t\t\t\tdoc,\n\t\t\t\t\t\tmodel,\n\t\t\t\t\t\tmodelsForRepository.sharedSliceModels,\n\t\t\t\t\t\trepositoryConfig,\n\t\t\t\t\t\tpluginOptions,\n\t\t\t\t\t);\n\n\t\t\t\t\tstate.addDocument(normalizedDocument);\n\t\t\t\t}\n\t\t\t}),\n\t\t),\n\t]);\n\n\tstate.setIsBootstrapped(true);\n};\n\nexport default bootstrapPrismicPreview;\n"],"names":["CustomTypeModelFieldType","CustomTypeModelSliceType","isNonNullish","input","isNonEmptyArray","length","richText","field","text","thumbnail","url","RichTextNodeType","RichTextReversedNodeType","uuid","i","toString","createTreeNode","node","children","key","type","createTextTreeNode","spans","prepareNodes","nodes","mutNodes","slice","items","push","splice","nodeToTreeNode","textNodeSpansToTreeNodeChildren","parentSpan","mutSpans","sort","a","b","start","end","span","parentSpanStart","spanStart","spanEnd","childSpans","j","siblingSpan","spanWithText","serialize","richTextField","serializer","serializeTreeNodes","preparedNodes","asTree","serializedTreeNodes","treeNode","serializedTreeNode","matchHtmlRegExp","escapeHTML","string","str","match","exec","escape","html","index","lastIndex","charCodeAt","substring","getLabel","data","label","serializeStandardTag","tag","join","serializeHyperlink","linkResolver","link_type","Web","target","Document","asLink","Media","createDefaultHTMLRichTextSerializer","_type","_key","serializePreFormatted","imageTag","alt","copyright","linkTo","serializeImage","oembed","embed_url","provider_name","serializeEmbed","content","replace","wrapMapSerializerWithStringChildren","mapSerializer","modifiedMapSerializer","tagSerializer","payload","wrapMapSerializer","buildURL","params","instance","URL","camelCasedParamKey","paramKey","toLowerCase","paramValue","searchParams","delete","Array","isArray","set","s","get","append","DEFAULT_IMGIX_PARAMS","fit","__assign","Object","assign","t","n","arguments","p","prototype","hasOwnProperty","call","apply","this","create","lowerCase","DEFAULT_SPLIT_REGEXP","DEFAULT_STRIP_REGEXP","re","value","RegExp","reduce","pascalCaseTransform","firstChar","charAt","lowerChars","substr","toUpperCase","pascalCaseTransformMerge","pascalCase","options","_a","splitRegexp","_b","stripRegexp","_c","transform","_d","delimiter","result","split","map","noCase","_len","pascalCase$1","filter","Boolean","defaultTransformFieldName","fieldName","withDocumentProxy","repositoryConfig","Proxy","target2","prop","receiver","id","getDocument","document","raw","Reflect","imgixGatsbyImageDataUrlBuilder","args","baseUrl","imageImgixParams","fm","format","w","width","h","height","normalizeImageField","image","pluginOptions","isFilled","gatsbyImageData","getImageData","sourceWidth","dimensions","sourceHeight","urlBuilder","localFile","publicURL","childImageSharp","normalizeField","async","looseModel","looseValue","path","sharedSliceModels","slices","Promise","all","sliceModel","config","choices","slice_type","__typename","typePrefix","concat","_toConsumableArray","primary","normalizeFields","item","repeat","typedSlice","sharedSliceModel","find","m","variationModel","variations","variation","group2","model","fields","_asLink","configObjectOrTuple","configObjectOrLinkResolver","maybeSerializer","serializers","res","composeSerializers","asHTML","htmlSerializer","configObjectOrSeparator","separator","asText","thumbnails","transformFieldName","thumbnailModel","name","models","fieldNames","keys","transformedFieldName","normalizeDocument","_asLink2","normalizedDocument","_previewable","prismicId","dataRaw","alternate_languages","alternateLanguage","fieldModels","values","json","extractLinkedDocumentIDsFromFields","flat","isBroken","extractLinkedDocumentIDsFromField","fetchLinkedDocuments","documents","client","customTypeModels","abortController","iterationCount","maximumIterationCount","aggregateAlreadyFetchedIDs","console","warn","alreadyFetchedIDs","doc","ids","customTypeModel","linkedIDs","alternateLanguageIDs","extractLinkedDocumentIDs","prunedIDs","includes","fetchedLinkedDocuments","getAllByIDs","Set","signal","usePrismicPreviewStore","getState","addDocument","isReleasePreview","test","getPreviewCookie","fetchNewDocuments","_ref","first","getFirst","rest","dangerouslyGetAll","predicates","dateBetween","Date","parse","last_publication_date","not","fetchPublishedDocumentIDs","endpoint","graphQLEndpoint","repositoryName","isRepositoryName","PrismicError","getGraphQLEndpoint","existingIDs","after","hasNextPage","afterStr","graphQLFetch","_allDocuments","edges","_meta","pageInfo","endCursor","bootstrapPrismicPreview","state","isBootstrapped","getPluginOptions","error","fmtLog","getRepositoryConfig","getClient","getCachedRepository","localPublishedDocumentIDs","newDocuments","setPublishedDocumentIDs","modelsRaw","fetch","withAssetPrefix","__PUBLIC_MODELS_PATH__","modelsForRepository","model2","setIsBootstrapped"],"sourceRoot":""}