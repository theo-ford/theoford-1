{"version":3,"file":"component---src-pages-preview-js.js","mappings":";;;;;;;;;;;;;;;;;AAEO,MAAMA,uBAAA,GAA0BA,CAAA,KAAyB;EAC/D,MAAM,GAAGC,cAAc,IACtBC,kBAAA,CAAmBC,sEAAA,MAAsB,EAAE,EAAEC,KAAA,CAC5C,uDAAuD,KACnD;EAEC,OAAAH,cAAA;AACR;;;;;;;;;;;;;;;ACDO,MAAMI,uBAAA,GACZC,gBAAA,IAEAA,gBAAA,CAAiBC,WAAA,IAAeD,gBAAA,CAAiBE,IAAA,IAAQ;;;;;;;;;;;;;;;ACX1D,MAAMC,SAAA,GAAaC,KAAA,IAAyB;EACpC,OAAAA,KAAA,CAAMC,OAAA,CAAQ,QAAQ,GAAG;AACjC;AAOO,MAAMR,gBAAA,GAAmBA,CAAA,KAAyB;EACxD,MAAMS,OAAA,GAAUC,QAAA,CAASC,MAAA,CAAOC,KAAA,CAAM,IAAI;EAE1C,WAAWD,MAAA,IAAUF,OAAA,EAAS;IACvB,MAAAI,KAAA,GAAQF,MAAA,CAAOC,KAAA,CAAM,GAAG;IACxB,MAAAE,QAAA,GAAWR,SAAA,CAAUO,KAAA,CAAM,CAAC,CAAC,EAAEL,OAAA,CAAQ,QAAQ,GAAG;IAMxD,IAAIM,QAAA,KAAa,sBAAsB;MACtC,MAAMP,KAAA,GAAQM,KAAA,CAAME,KAAA,CAAM,CAAC,EAAEC,IAAA,CAAK,GAAG;MAErC,OAAOV,SAAA,CAAUC,KAAK;IACtB;EACD;AACF;;;;;;;;;;;;;;;;;;;;;;;;ACjBa,MAAAU,0BAAA,GACZd,gBAAA,IACgC;EAC1B,MAAAe,0BAAA,GAA8BC,KAAA,IAA8B;IACjE,MAAM,CAACC,gBAAA,EAAkBC,mBAAmB,IAAIC,2CAAM,CAEpD,IAAI;IAENA,4CAAM,CAAU,MAAK;MACd,MAAAG,eAAA,GAAkB,IAAIC,eAAA;MAE5B,MAAM5B,cAAA,GAAiBD,wFAAA;MACHwB,mBAAA,EAAC,CAACvB,cAAc;MAEpC,IAAIA,cAAA,EAAgB;QACZ,mSAA8B,CAAC6B,IAAA,CAAMC,GAAA,IAC3CA,GAAA,CAAIC,OAAA,CAAQ/B,cAAA,EAAgB2B,eAAe,CAAC;MAE7C;MAEM,aAAMA,eAAA,CAAgBK,KAAA;IAC9B,GAAG,EAAE;IAEL,OAAQ,eAAAC,sDAAA,CAAA5B,gBAAA;MAAiB,GAAIgB,KAAA;MAAOC;IAAmC;EAAA;EAGpE,IAAAY,IAAsC,EAAE;IACrC,MAAAG,oBAAA,GAAuBjC,wFAAA,CAAwBC,gBAAgB;IACrEe,0BAAA,CAA2Bd,WAAA,GAAc,8BAA8B+B,oBAAA;EACvE;EAEM,OAAAjB,0BAAA;AACR;;;;;;;;;;;;;;;;;;ACzC+B;AAC6C;AAE5E,MAAMkB,WAAW,GAAGA,CAAC;EAAEC,SAAS;EAAEC;AAAU,CAAC,KAAK;EAChD,IAAID,SAAS,KAAK,KAAK,EAAE,OAAO,gBAAgB;EAEhD,oBACEf,gDAAA,CAAAA,2CAAA,qBACEA,gDAAA,YAAG,SAAU,CACb,CAAC;AAEP,CAAC;AAGD,iEAAeL,0FAA0B,CAACmB,WAAW,EAAE;EACrDtC,cAAc,EAAG;EACjB;AACF,CAAC,CAAC","sources":["webpack://studio-prismic-starter/../../../src/lib/getActiveRepositoryName.ts","webpack://studio-prismic-starter/../../../src/lib/getComponentDisplayName.ts","webpack://studio-prismic-starter/../../../src/lib/getPreviewCookie.ts","webpack://studio-prismic-starter/../../src/withPrismicPreviewResolver.tsx","webpack://studio-prismic-starter/./src/pages/preview.js"],"sourcesContent":["import { getPreviewCookie } from \"./getPreviewCookie\";\n\nexport const getActiveRepositoryName = (): string | undefined => {\n\tconst [, repositoryName] =\n\t\tdecodeURIComponent(getPreviewCookie() || \"\").match(\n\t\t\t/\"([a-zA-Z0-9][-a-zA-Z0-9]{2,}[a-zA-Z0-9]).prismic.io\"/,\n\t\t) || [];\n\n\treturn repositoryName;\n};\n","/**\n * Returns a component's display name. If none is provided, \"Component\" is\n * returned.\n *\n * @param WrappedComponent - Component from which to get the display name.\n *\n * @returns `WrappedComponent`'s display name.\n */\nexport const getComponentDisplayName = <TProps>(\n\tWrappedComponent: React.ComponentType<TProps>,\n): string =>\n\tWrappedComponent.displayName || WrappedComponent.name || \"Component\";\n","const readValue = (value: string): string => {\n\treturn value.replace(/%3B/g, \";\");\n};\n\n/**\n * Returns the value of a cookie from a given cookie store.\n *\n * @returns The value of the cookie, if it exists.\n */\nexport const getPreviewCookie = (): string | undefined => {\n\tconst cookies = document.cookie.split(\"; \");\n\n\tfor (const cookie of cookies) {\n\t\tconst parts = cookie.split(\"=\");\n\t\tconst thisName = readValue(parts[0]).replace(/%3D/g, \"=\");\n\n\t\t// The Prismic preview cookie name is hardcoded here to prevent\n\t\t// including `@prismicio/client` in the main \"app.js\" bundle.\n\t\t// Unfortunately, the package is not tree-shaken when only the\n\t\t// cookie name is imported.\n\t\tif (thisName === \"io.prismic.preview\") {\n\t\t\tconst value = parts.slice(1).join(\"=\");\n\n\t\t\treturn readValue(value);\n\t\t}\n\t}\n};\n","import * as React from \"react\";\n\nimport { getActiveRepositoryName } from \"./lib/getActiveRepositoryName\";\nimport { getComponentDisplayName } from \"./lib/getComponentDisplayName\";\n\nexport type WithPrismicPreviewResolverProps = {\n\tisPrismicPreview: boolean;\n};\n\nexport const withPrismicPreviewResolver = <TProps,>(\n\tWrappedComponent: React.ComponentType<TProps>,\n): React.ComponentType<TProps> => {\n\tconst WithPrismicPreviewResolver = (props: TProps): JSX.Element => {\n\t\tconst [isPrismicPreview, setIsPrismicPreview] = React.useState<\n\t\t\tboolean | null\n\t\t>(null);\n\n\t\tReact.useEffect(() => {\n\t\t\tconst abortController = new AbortController();\n\n\t\t\tconst repositoryName = getActiveRepositoryName();\n\t\t\tsetIsPrismicPreview(!!repositoryName);\n\n\t\t\tif (repositoryName) {\n\t\t\t\timport(\"./lib/resolvePrismicPreview\").then((mod) =>\n\t\t\t\t\tmod.default(repositoryName, abortController),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn () => abortController.abort();\n\t\t}, []);\n\n\t\treturn <WrappedComponent {...props} isPrismicPreview={isPrismicPreview} />;\n\t};\n\n\tif (process.env.NODE_ENV === \"development\") {\n\t\tconst wrappedComponentName = getComponentDisplayName(WrappedComponent);\n\t\tWithPrismicPreviewResolver.displayName = `withPrismicPreviewResolver(${wrappedComponentName})`;\n\t}\n\n\treturn WithPrismicPreviewResolver;\n};\n","import * as React from \"react\";\nimport { withPrismicPreviewResolver } from \"gatsby-plugin-prismic-previews\";\n\nconst PreviewPage = ({ isPreview, isLoading }) => {\n  if (isPreview === false) return \"Not a preview!\";\n\n  return (\n    <>\n      <p>Loading</p>\n    </>\n  );\n};\n\n\nexport default withPrismicPreviewResolver(PreviewPage, {\n  repositoryName: `Martinez-2`,\n  // linkResolver: ({ node, key, value }) => (post) => `/${post.uid}`,\n});\n"],"names":["getActiveRepositoryName","repositoryName","decodeURIComponent","getPreviewCookie","match","getComponentDisplayName","WrappedComponent","displayName","name","readValue","value","replace","cookies","document","cookie","split","parts","thisName","slice","join","withPrismicPreviewResolver","WithPrismicPreviewResolver","props","isPrismicPreview","setIsPrismicPreview","React","useState","useEffect","abortController","AbortController","then","mod","default","abort","jsx","process","env","NODE_ENV","wrappedComponentName","PreviewPage","isPreview","isLoading","createElement","Fragment"],"sourceRoot":""}