{"version":3,"file":"component---src-pages-preview-js.js","mappings":";;;;;;;;;;;;AAEO,KAAM,CAAAA,uBAAA,CAA0BA,CAAA,GAAyB,CAC/D,KAAM,EAAGC,cAAc,EACtBC,kBAAA,CAAmBC,+EAAA,IAAsB,EAAE,EAAEC,KAAA,CAC5C,uDAAuD,GACnD,GAEC,OAAAH,cAAA,CACR;;;;;;;;;;ACTA,KAAM,CAAAI,SAAA,CAAaC,KAAA,EAAyB,CACpC,OAAAA,KAAA,CAAMC,OAAA,CAAQ,OAAQ,GAAG,EACjC,EAOO,KAAM,CAAAJ,gBAAA,CAAmBA,CAAA,GAAyB,CACxD,KAAM,CAAAK,OAAA,CAAUC,QAAA,CAASC,MAAA,CAAOC,KAAA,CAAM,IAAI,EAE1C,SAAW,CAAAD,MAAA,GAAU,CAAAF,OAAA,CAAS,CACvB,MAAAI,KAAA,CAAQF,MAAA,CAAOC,KAAA,CAAM,GAAG,EACxB,MAAAE,QAAA,CAAWR,SAAA,CAAUO,KAAA,CAAM,CAAC,CAAC,EAAEL,OAAA,CAAQ,OAAQ,GAAG,EAMxD,GAAIM,QAAA,GAAa,qBAAsB,CACtC,KAAM,CAAAP,KAAA,CAAQM,KAAA,CAAME,KAAA,CAAM,CAAC,EAAEC,IAAA,CAAK,GAAG,EAErC,MAAO,CAAAV,SAAA,CAAUC,KAAK,EACtB,CACD,CACF;;;;;;;;;;;;;;;;;;;;;;ACjBa,MAAAU,0BAAA,CACZC,gBAAA,EACgC,CAC1B,MAAAC,0BAAA,CAA8BC,KAAA,EAA8B,CACjE,KAAM,CAACC,gBAAA,CAAkBC,mBAAmB,EAAIC,kBAAM,CAEpD,IAAI,EAENA,mBAAM,CAAU,IAAK,CACd,MAAAG,eAAA,CAAkB,GAAI,CAAAC,eAAA,GAE5B,KAAM,CAAAzB,cAAA,CAAiBD,0DAAA,GACHqB,mBAAA,EAAC,CAACpB,cAAc,EAEpC,GAAIA,cAAA,CAAgB,CACZ,4IAA8B,CAAC0B,IAAA,CAAMC,GAAA,EAC3CA,GAAA,CAAIC,OAAA,CAAQ5B,cAAA,CAAgBwB,eAAe,CAAC,EAE7C,CAEM,UAAMA,eAAA,CAAgBK,KAAA,GAC9B,EAAG,EAAE,EAEL,MAAQ,eAAAC,mBAAA,CAAAd,gBAAA,EAAiB,GAAIE,KAAA,CAAOC,gBAAmC,KAGpE,GAAAY,KAAsC,CAAE,EAKrC,OAAAd,0BAAA,CACR;;ACtCA,KAAM,CAAAoB,WAAW,CAAGA,CAAC,CAAEC,SAAS,CAAEC,SAAU,CAAC,GAAK,CAChD,GAAID,SAAS,GAAK,KAAK,CAAE,MAAO,gBAAgB,CAEhD,mBACEjB,uBAAA,CAAAA,kBAAA,mBACEA,uBAAA,UAAG,SAAU,CACb,CAAC,CAEP,CAAC,CAGD,8CAAeN,0BAA0B,CAACsB,WAAW,CAAE,CACrDrC,cAAc,CAAG,YACjB;AACF,CAAC,CAAC","sources":["webpack://studio-prismic-starter/../../../src/lib/getActiveRepositoryName.ts","webpack://studio-prismic-starter/../../../src/lib/getPreviewCookie.ts","webpack://studio-prismic-starter/../../src/withPrismicPreviewResolver.tsx","webpack://studio-prismic-starter/./src/pages/preview.js"],"sourcesContent":["import { getPreviewCookie } from \"./getPreviewCookie\";\n\nexport const getActiveRepositoryName = (): string | undefined => {\n\tconst [, repositoryName] =\n\t\tdecodeURIComponent(getPreviewCookie() || \"\").match(\n\t\t\t/\"([a-zA-Z0-9][-a-zA-Z0-9]{2,}[a-zA-Z0-9]).prismic.io\"/,\n\t\t) || [];\n\n\treturn repositoryName;\n};\n","const readValue = (value: string): string => {\n\treturn value.replace(/%3B/g, \";\");\n};\n\n/**\n * Returns the value of a cookie from a given cookie store.\n *\n * @returns The value of the cookie, if it exists.\n */\nexport const getPreviewCookie = (): string | undefined => {\n\tconst cookies = document.cookie.split(\"; \");\n\n\tfor (const cookie of cookies) {\n\t\tconst parts = cookie.split(\"=\");\n\t\tconst thisName = readValue(parts[0]).replace(/%3D/g, \"=\");\n\n\t\t// The Prismic preview cookie name is hardcoded here to prevent\n\t\t// including `@prismicio/client` in the main \"app.js\" bundle.\n\t\t// Unfortunately, the package is not tree-shaken when only the\n\t\t// cookie name is imported.\n\t\tif (thisName === \"io.prismic.preview\") {\n\t\t\tconst value = parts.slice(1).join(\"=\");\n\n\t\t\treturn readValue(value);\n\t\t}\n\t}\n};\n","import * as React from \"react\";\n\nimport { getActiveRepositoryName } from \"./lib/getActiveRepositoryName\";\nimport { getComponentDisplayName } from \"./lib/getComponentDisplayName\";\n\nexport type WithPrismicPreviewResolverProps = {\n\tisPrismicPreview: boolean;\n};\n\nexport const withPrismicPreviewResolver = <TProps,>(\n\tWrappedComponent: React.ComponentType<TProps>,\n): React.ComponentType<TProps> => {\n\tconst WithPrismicPreviewResolver = (props: TProps): JSX.Element => {\n\t\tconst [isPrismicPreview, setIsPrismicPreview] = React.useState<\n\t\t\tboolean | null\n\t\t>(null);\n\n\t\tReact.useEffect(() => {\n\t\t\tconst abortController = new AbortController();\n\n\t\t\tconst repositoryName = getActiveRepositoryName();\n\t\t\tsetIsPrismicPreview(!!repositoryName);\n\n\t\t\tif (repositoryName) {\n\t\t\t\timport(\"./lib/resolvePrismicPreview\").then((mod) =>\n\t\t\t\t\tmod.default(repositoryName, abortController),\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn () => abortController.abort();\n\t\t}, []);\n\n\t\treturn <WrappedComponent {...props} isPrismicPreview={isPrismicPreview} />;\n\t};\n\n\tif (process.env.NODE_ENV === \"development\") {\n\t\tconst wrappedComponentName = getComponentDisplayName(WrappedComponent);\n\t\tWithPrismicPreviewResolver.displayName = `withPrismicPreviewResolver(${wrappedComponentName})`;\n\t}\n\n\treturn WithPrismicPreviewResolver;\n};\n","import * as React from \"react\";\nimport { withPrismicPreviewResolver } from \"gatsby-plugin-prismic-previews\";\n\nconst PreviewPage = ({ isPreview, isLoading }) => {\n  if (isPreview === false) return \"Not a preview!\";\n\n  return (\n    <>\n      <p>Loading</p>\n    </>\n  );\n};\n\n\nexport default withPrismicPreviewResolver(PreviewPage, {\n  repositoryName: `Martinez-2`,\n  // linkResolver: ({ node, key, value }) => (post) => `/${post.uid}`,\n});\n"],"names":["getActiveRepositoryName","repositoryName","decodeURIComponent","getPreviewCookie","match","readValue","value","replace","cookies","document","cookie","split","parts","thisName","slice","join","withPrismicPreviewResolver","WrappedComponent","WithPrismicPreviewResolver","props","isPrismicPreview","setIsPrismicPreview","React","useState","useEffect","abortController","AbortController","then","mod","default","abort","jsx","process","env","NODE_ENV","wrappedComponentName","getComponentDisplayName","displayName","PreviewPage","isPreview","isLoading","createElement","Fragment"],"sourceRoot":""}