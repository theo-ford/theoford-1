{"version":3,"file":"node_modules_gatsby-plugin-prismic-previews_dist_lib_resolveUnpublishedPrismicPreview_js.js","mappings":";;;;;;;;;;;;;;;AAAa,MAAAA,MAAA,GAASA,CAACC,cAAA,EAAwBC,IAAA,KAAwB;EACtE,OAAO,kCAAkCD,cAAA,OAAqBC,IAAA;AAC/D;;;;;;;;;;;;;;;;;ACEa,MAAAC,mBAAA,GACZF,cAAA,IACiC;EAC3B,MAAAG,KAAA,GAAQC,8EAAA,CAAuBC,QAAA;EAErC,OAAOF,KAAA,CAAMG,iBAAA,CAAkBC,IAAA,CAC7BC,MAAA,IAAWA,MAAA,CAAOR,cAAA,KAAmBA,cAAc;AAEtD;;;;;;;;;;;;;;;;;;;;;ACLA,MAAMS,gCAAA,GAAmCA,CACxCT,cAAA,EACAU,eAAA,EACAC,kBAAA,EAMAC,QAAA,KACS;EACT,IAAIA,QAAA,EAAU;IACP,MAAAC,gBAAA,GAAmBX,4EAAA,CAAoBF,cAAc;IAC3D,IAAI,CAACa,gBAAA,EAAkB;MACtBC,OAAA,CAAQC,KAAA,CACPhB,kDAAA,CACCC,cAAA,EACA,2MAA2M,CAC3M;MAGF;IACA;IAED,IAAIa,gBAAA,CAAiBG,iBAAA,EAAmB;MACjC,MAAAb,KAAA,GAAQC,8EAAA,CAAuBC,QAAA;MAE/B,MAAAY,gBAAA,GAAmBC,MAAA,CAAOC,MAAA,CAAOhB,KAAA,CAAMiB,SAAS,EAAEC,MAAA,CACtDC,GAAA,IAAQA,GAAA,CAAIC,GAAA,KAAQX,QAAQ;MAG1B,IAAAK,gBAAA,CAAiBO,MAAA,GAAS,GAAG;QAC1B,MAAAC,aAAA,GAAgBR,gBAAA,CAAiB,CAAC;QAExC,MAAMS,QAAA,GAAWD,aAAA,CAAcE,UAAA;QACzB,MAAAC,OAAA,GAAUF,QAAA,CAASG,MAAA,CAAO,CAAC,EAAEC,WAAA,CAAW,IAAKJ,QAAA,CAASK,KAAA,CAAM,CAAC;QAEnE,MAAMf,iBAAA,GAAoBH,gBAAA,CAAiBG,iBAAA;QAErC,MAAAgB,iBAAA,GACL,OAAOhB,iBAAA,KAAsB,aAC1BA,iBAAA,CAAkBC,gBAAgB,IAClCD,iBAAA,CAAkBS,aAAA,CAAcQ,IAAI;QAExC,IAAID,iBAAA,EAAmB;UAClB,KAACtB,eAAA,CAAgBwB,MAAA,CAAOC,OAAA,EAAS;YACjBxB,kBAAA;cAClByB,IAAA,EAAM;gBAAE,CAACR,OAAO,GAAGH;cAAe;cAClCY,SAAA,EAAWL;YAAA,CACX;UACD;QAAA,OACK;UACElB,OAAA,CAAAwB,IAAA,CACPvC,kDAAA,CACCC,cAAA,EACA;AAAA;AAAA,iKAA4RyB,aAAA,CAAcQ,IAAA,cAAkB,CAC5T;QAEF;MACD;IAAA,OACK;MACNnB,OAAA,CAAQwB,IAAA,CACPvC,kDAAA,CACCC,cAAA,EACA,iUAAiU,CACjU;IAEF;EACD;AACF","sources":["webpack://studio-prismic-starter/../../../src/lib/fmtLog.ts","webpack://studio-prismic-starter/../../../src/lib/getRepositoryConfig.ts","webpack://studio-prismic-starter/../../../src/lib/resolveUnpublishedPrismicPreview.ts"],"sourcesContent":["export const fmtLog = (repositoryName: string, text: string): string => {\n\treturn `gatsby-plugin-prismic-previews(${repositoryName}) - ${text}`;\n};\n","import type { RepositoryConfig } from \"../types\";\n\nimport { usePrismicPreviewStore } from \"../usePrismicPreviewStore\";\n\nexport const getRepositoryConfig = (\n\trepositoryName: string,\n): RepositoryConfig | undefined => {\n\tconst state = usePrismicPreviewStore.getState();\n\n\treturn state.repositoryConfigs.find(\n\t\t(config) => config.repositoryName === repositoryName,\n\t);\n};\n","import type { NormalizedDocument, PagePropsLike } from \"../types\";\n\nimport { usePrismicPreviewStore } from \"../usePrismicPreviewStore\";\n\nimport { fmtLog } from \"./fmtLog\";\nimport { getRepositoryConfig } from \"./getRepositoryConfig\";\n\nconst resolveUnpublishedPrismicPreview = <TProps extends PagePropsLike>(\n\trepositoryName: string,\n\tabortController: AbortController,\n\tsetUnpublishedData: React.Dispatch<\n\t\tReact.SetStateAction<{\n\t\t\tdata?: { [key: string]: NormalizedDocument };\n\t\t\tcomponent?: React.ComponentType<TProps>;\n\t\t}>\n\t>,\n\tpathname?: string,\n): void => {\n\tif (pathname) {\n\t\tconst repositoryConfig = getRepositoryConfig(repositoryName);\n\t\tif (!repositoryConfig) {\n\t\t\tconsole.error(\n\t\t\t\tfmtLog(\n\t\t\t\t\trepositoryName,\n\t\t\t\t\t'Repository configuration could not be found. Did you add <PrismicPreviewProvider> to your \"gatsby-browser.js\" and \"gatsby-ssr.js\"? It must contain a repository configuration object for this repository.',\n\t\t\t\t),\n\t\t\t);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (repositoryConfig.componentResolver) {\n\t\t\tconst state = usePrismicPreviewStore.getState();\n\n\t\t\tconst documentsForPage = Object.values(state.documents).filter(\n\t\t\t\t(doc) => doc.url === pathname,\n\t\t\t);\n\n\t\t\tif (documentsForPage.length > 0) {\n\t\t\t\tconst firstDocument = documentsForPage[0];\n\n\t\t\t\tconst typename = firstDocument.__typename;\n\t\t\t\tconst dataKey = typename.charAt(0).toLowerCase() + typename.slice(1);\n\n\t\t\t\tconst componentResolver = repositoryConfig.componentResolver;\n\n\t\t\t\tconst ResolvedComponent =\n\t\t\t\t\ttypeof componentResolver === \"function\"\n\t\t\t\t\t\t? componentResolver(documentsForPage)\n\t\t\t\t\t\t: componentResolver[firstDocument.type];\n\n\t\t\t\tif (ResolvedComponent) {\n\t\t\t\t\tif (!abortController.signal.aborted) {\n\t\t\t\t\t\tsetUnpublishedData({\n\t\t\t\t\t\t\tdata: { [dataKey]: firstDocument },\n\t\t\t\t\t\t\tcomponent: ResolvedComponent,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(\n\t\t\t\t\t\tfmtLog(\n\t\t\t\t\t\t\trepositoryName,\n\t\t\t\t\t\t\t`A component for this unpublished document preview was not found. The app's default 404 page will be displayed instead.\\n\\nIf this was unintentional, you can fix the issue by ensuring the componentResolver option for this repository in <PrismicPreviewProvider> returns a value for \"${firstDocument.type}\" documents.`,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\tfmtLog(\n\t\t\t\t\trepositoryName,\n\t\t\t\t\t\"A componentResolver object or function for this repository was not provided to <PrismicPreviewProvider>. The app's default 404 page will be displayed instead of the previewed document.\\n\\nYou can fix this warning by adding a componentResolver value to this repository's configuration object in <PrismicPreviewProvider>.\",\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n};\n\nexport default resolveUnpublishedPrismicPreview;\n"],"names":["fmtLog","repositoryName","text","getRepositoryConfig","state","usePrismicPreviewStore","getState","repositoryConfigs","find","config","resolveUnpublishedPrismicPreview","abortController","setUnpublishedData","pathname","repositoryConfig","console","error","componentResolver","documentsForPage","Object","values","documents","filter","doc","url","length","firstDocument","typename","__typename","dataKey","charAt","toLowerCase","slice","ResolvedComponent","type","signal","aborted","data","component","warn"],"sourceRoot":""}