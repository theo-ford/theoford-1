{"version":3,"file":"528.js","mappings":";;;;;;;;;;;;;;;;;AAOM,MAAAA,qBAAA,CAAwB,KAAAA,CAC7BC,cAAA,CACAC,eAAA,GACkB,CACZ,MAAAC,aAAA,CAAgBC,+EAAA,CAAiBH,cAAc,EACrD,GAAI,CAACE,aAAA,CAAe,CACnBE,OAAA,CAAQC,KAAA,CACPC,2DAAA,CACCN,cAAA,CACA,4IAA6I,CAC7I,EAGF,OACA,CAEK,MAAAO,gBAAA,CAAmBC,qFAAA,CAAoBR,cAAc,EAC3D,GAAI,CAACO,gBAAA,CAAkB,CACtBH,OAAA,CAAQC,KAAA,CACPC,2DAAA,CACCN,cAAA,CACA,2MAA2M,CAC3M,EAGF,OACA,CAEK,MAAAS,MAAA,CAASC,iEAAA,CAAUR,aAAa,EAElC,IACG,MAAAS,IAAA,CAAO,KAAM,CAAAF,MAAA,CAAOG,iBAAA,CAAkB,CAC3CC,YAAA,CAAcN,gBAAA,CAAiBM,YAAA,CAC/BC,UAAA,CAAY,IACZC,MAAA,CAAQd,eAAA,CAAgBc,MAAA,CACxB,EAEG,IAACd,eAAA,CAAgBc,MAAA,CAAOC,OAAA,CAAS,CACpCC,gDAAA,CAASN,IAAI,EACb,QACON,KAAA,EACR,GAAI,EAAEA,KAAA,WAAiB,CAAAa,KAAA,EAASb,KAAA,CAAMc,IAAA,GAAS,cAAe,CACvD,MAAAd,KAAA,CACN,CACD,CACF","sources":["webpack://studio-prismic-starter/../../../src/lib/resolvePrismicPreview.ts"],"sourcesContent":["import { navigate } from \"gatsby\";\n\nimport { fmtLog } from \"./fmtLog\";\nimport { getClient } from \"./getClient\";\nimport { getPluginOptions } from \"./getPluginOptions\";\nimport { getRepositoryConfig } from \"./getRepositoryConfig\";\n\nconst resolvePrismicPreview = async (\n\trepositoryName: string,\n\tabortController: AbortController,\n): Promise<void> => {\n\tconst pluginOptions = getPluginOptions(repositoryName);\n\tif (!pluginOptions) {\n\t\tconsole.error(\n\t\t\tfmtLog(\n\t\t\t\trepositoryName,\n\t\t\t\t'Plugin options could not be found. Did you add \"gatsby-plugin-prismic-previews\" for this repository to your app\\'s \"gatsby-config.js\" file?',\n\t\t\t),\n\t\t);\n\n\t\treturn;\n\t}\n\n\tconst repositoryConfig = getRepositoryConfig(repositoryName);\n\tif (!repositoryConfig) {\n\t\tconsole.error(\n\t\t\tfmtLog(\n\t\t\t\trepositoryName,\n\t\t\t\t'Repository configuration could not be found. Did you add <PrismicPreviewProvider> to your \"gatsby-browser.js\" and \"gatsby-ssr.js\"? It must contain a repository configuration object for this repository.',\n\t\t\t),\n\t\t);\n\n\t\treturn;\n\t}\n\n\tconst client = getClient(pluginOptions);\n\n\ttry {\n\t\tconst path = await client.resolvePreviewURL({\n\t\t\tlinkResolver: repositoryConfig.linkResolver,\n\t\t\tdefaultURL: \"/\",\n\t\t\tsignal: abortController.signal,\n\t\t});\n\n\t\tif (!abortController.signal.aborted) {\n\t\t\tnavigate(path);\n\t\t}\n\t} catch (error) {\n\t\tif (!(error instanceof Error && error.name === \"AbortError\")) {\n\t\t\tthrow error;\n\t\t}\n\t}\n};\n\nexport default resolvePrismicPreview;\n"],"names":["resolvePrismicPreview","repositoryName","abortController","pluginOptions","getPluginOptions","console","error","fmtLog","repositoryConfig","getRepositoryConfig","client","getClient","path","resolvePreviewURL","linkResolver","defaultURL","signal","aborted","navigate","Error","name"],"sourceRoot":""}